%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                           %
% Copyright (C) 2011 Weil Cornell Medical College           %
%                                                           %
%  Author: Pascal Spincemaille                              %
%                                                           %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function [t, outpos] = gehdr_reader20M3(chr, inpos, type, count)
  [t, outpos] = eval(['read_' type '(chr, inpos, count);']);

function [t, outpos] = read_int(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'int32');

function [t, outpos] = read_int32_t(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'int32');

function [t, outpos] = read_long_long_int(chr, inpos, count)
  outpos = inpos + count*8;
  t = mytypecast(chr(inpos:outpos-1), 'int64');

function [t, outpos] = read_unsigned_char(chr, inpos, count)
  outpos = inpos + count*1;
  t = mytypecast(chr(inpos:outpos-1), 'uchar');

function [t, outpos] = read_signed_char(chr, inpos, count)
  outpos = inpos + count*1;
  t = mytypecast(chr(inpos:outpos-1), 'schar');

function [t, outpos] = read_double(chr, inpos, count)
  outpos = inpos + count*8;
  t = mytypecast(chr(inpos:outpos-1), 'float64');

function [t, outpos] = read_short(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'int16');

function [t, outpos] = read_float(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'float32');

function [t, outpos] = read_unsigned_long_long_int(chr, inpos, count)
  outpos = inpos + count*8;
  t = mytypecast(chr(inpos:outpos-1), 'uint64');

function [t, outpos] = read_long(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'int32');

function [t, outpos] = read_unsigned_long_int(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'uint32');

function [t, outpos] = read_unsigned_short(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'uint16');

function [t, outpos] = read_unsigned_long(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'uint32');

function [t, outpos] = read_long_int(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'int32');

function [t, outpos] = read_int16_t(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'int16');

function [t, outpos] = read_unsigned_int(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'uint32');

function [t, outpos] = read_unsigned_short_int(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'uint16');

function [t, outpos] = read_u_int16_t(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'uint16');

function [t, outpos] = read_char(chr, inpos, count)
  outpos = inpos + count*1;
  t = char(chr(inpos:outpos-1))';

function [t, outpos] = read_signed_short_int(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'int16');

function [t, outpos] = read_u_int32_t(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'uint32');

function [t, outpos] = read_short_int(chr, inpos, count)
  outpos = inpos + count*2;
  t = mytypecast(chr(inpos:outpos-1), 'int16');

function [t, outpos] = read_signed_int(chr, inpos, count)
  outpos = inpos + count*4;
  t = mytypecast(chr(inpos:outpos-1), 'int32');

function [t, outpos] = read_size_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_ulong(chr, inpos, count)
  [t, outpos] = read_unsigned_long_int(chr, inpos, count);

function [t, outpos] = read_ushort(chr, inpos, count)
  [t, outpos] = read_unsigned_short_int(chr, inpos, count);

function [t, outpos] = read_uint(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_struct_timespec(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.tv_nsec = read_long_int(chr2(5:8,:), 1, count);

function [t, outpos] = read_ptrdiff_t(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_wchar_t(chr, inpos, count)
  [t, outpos] = read_long_int(chr, inpos, count);

function [t, outpos] = read_uint8_t(chr, inpos, count)
  [t, outpos] = read_unsigned_char(chr, inpos, count);

function [t, outpos] = read_uint16_t(chr, inpos, count)
  [t, outpos] = read_unsigned_short_int(chr, inpos, count);

function [t, outpos] = read_uint32_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_uint64_t(chr, inpos, count)
  [t, outpos] = read_unsigned_long_long_int(chr, inpos, count);

function [t, outpos] = read_int_least8_t(chr, inpos, count)
  [t, outpos] = read_signed_char(chr, inpos, count);

function [t, outpos] = read_int_least16_t(chr, inpos, count)
  [t, outpos] = read_short_int(chr, inpos, count);

function [t, outpos] = read_int_least32_t(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_int_least64_t(chr, inpos, count)
  [t, outpos] = read_long_long_int(chr, inpos, count);

function [t, outpos] = read_uint_least8_t(chr, inpos, count)
  [t, outpos] = read_unsigned_char(chr, inpos, count);

function [t, outpos] = read_uint_least16_t(chr, inpos, count)
  [t, outpos] = read_unsigned_short_int(chr, inpos, count);

function [t, outpos] = read_uint_least32_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_uint_least64_t(chr, inpos, count)
  [t, outpos] = read_unsigned_long_long_int(chr, inpos, count);

function [t, outpos] = read_int_fast8_t(chr, inpos, count)
  [t, outpos] = read_signed_char(chr, inpos, count);

function [t, outpos] = read_int_fast16_t(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_int_fast32_t(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_int_fast64_t(chr, inpos, count)
  [t, outpos] = read_long_long_int(chr, inpos, count);

function [t, outpos] = read_uint_fast8_t(chr, inpos, count)
  [t, outpos] = read_unsigned_char(chr, inpos, count);

function [t, outpos] = read_uint_fast16_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_uint_fast32_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_uint_fast64_t(chr, inpos, count)
  [t, outpos] = read_unsigned_long_long_int(chr, inpos, count);

function [t, outpos] = read_intptr_t(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_uintptr_t(chr, inpos, count)
  [t, outpos] = read_unsigned_int(chr, inpos, count);

function [t, outpos] = read_intmax_t(chr, inpos, count)
  [t, outpos] = read_long_long_int(chr, inpos, count);

function [t, outpos] = read_uintmax_t(chr, inpos, count)
  [t, outpos] = read_unsigned_long_long_int(chr, inpos, count);

function [t, outpos] = read_s8(chr, inpos, count)
  [t, outpos] = read_char(chr, inpos, count);

function [t, outpos] = read_n8(chr, inpos, count)
  [t, outpos] = read_unsigned_char(chr, inpos, count);

function [t, outpos] = read_s16(chr, inpos, count)
  [t, outpos] = read_int16_t(chr, inpos, count);

function [t, outpos] = read_n16(chr, inpos, count)
  [t, outpos] = read_u_int16_t(chr, inpos, count);

function [t, outpos] = read_s32(chr, inpos, count)
  [t, outpos] = read_long(chr, inpos, count);

function [t, outpos] = read_n32(chr, inpos, count)
  [t, outpos] = read_unsigned_long(chr, inpos, count);

function [t, outpos] = read_s64(chr, inpos, count)
  [t, outpos] = read_int64_t(chr, inpos, count);

function [t, outpos] = read_n64(chr, inpos, count)
  [t, outpos] = read_uint64_t(chr, inpos, count);

function [t, outpos] = read_f32(chr, inpos, count)
  [t, outpos] = read_float(chr, inpos, count);

function [t, outpos] = read_f64(chr, inpos, count)
  [t, outpos] = read_double(chr, inpos, count);

function [t, outpos] = read_TD_MR_CFG(chr, inpos, count)
  outpos = inpos + 220 * count;
  chr2=reshape(chr(inpos:inpos+count*220-1), 220, []);
  t.fileFormatRev = read_int(chr2(1:4,:), 1, count);
  t.researchSite = read_short(chr2(5:6,:), 1, count);
  t.lineFreq = read_int(chr2(9:12,:), 1, count);
  t.specRFamp = read_short(chr2(13:14,:), 1, count);
  t.broadBandXcvr = read_short(chr2(15:16,:), 1, count);
  t.trDither = read_short(chr2(17:18,:), 1, count);
  t.rfBodyVectorZ = read_int(chr2(21:24,:), 1, count);
  t.rfBodyLength = read_int(chr2(25:28,:), 1, count);
  t.rfBodyRadius = read_int(chr2(29:32,:), 1, count);
  t.rfHeadVectorY = read_int(chr2(33:36,:), 1, count);
  t.rfHeadVectorZ = read_int(chr2(37:40,:), 1, count);
  t.rfHeadLength = read_int(chr2(41:44,:), 1, count);
  t.rfHeadRadius = read_int(chr2(45:48,:), 1, count);
  t.xfull = read_int(chr2(49:52,:), 1, count);
  t.yfull = read_int(chr2(53:56,:), 1, count);
  t.zfull = read_int(chr2(57:60,:), 1, count);
  t.gradientScale = read_float(chr2(61:64,:), 1, count);
  t.minGradRamp = read_int(chr2(65:68,:), 1, count);
  t.ampCalHead = read_int(chr2(69:72,:), 1, count);
  t.ampCalBody = read_int(chr2(73:76,:), 1, count);
  t.magnetType = read_int(chr2(77:80,:), 1, count);
  t.fieldStrength = read_int(chr2(81:84,:), 1, count);
  t.isoVectorZ = read_int(chr2(85:88,:), 1, count);
  t.tableLimit = read_int(chr2(89:92,:), 1, count);
  t.begTravel = read_int(chr2(93:96,:), 1, count);
  t.endTravel = read_int(chr2(97:100,:), 1, count);
  t.maxGradShim = read_int(chr2(101:104,:), 1, count);
  t.hpdl = read_int(chr2(105:108,:), 1, count);
  t.bpdl = read_int(chr2(109:112,:), 1, count);
  t.hpsl = read_int(chr2(113:116,:), 1, count);
  t.bpsl = read_int(chr2(117:120,:), 1, count);
  t.hpv = read_int(chr2(121:124,:), 1, count);
  t.bpv = read_int(chr2(125:128,:), 1, count);
  t.hqpc = read_float(chr2(129:132,:), 1, count);
  t.bqpc = read_float(chr2(133:136,:), 1, count);
  t.hllr = read_int(chr2(137:140,:), 1, count);
  t.bllr = read_int(chr2(141:144,:), 1, count);
  t.netLoss = read_float(chr2(145:148,:), 1, count);
  t.maxCoilCurrent = read_int(chr2(149:152,:), 1, count);
  t.aveCoilCurrent = read_int(chr2(153:156,:), 1, count);
  t.fixedHWtdel = read_int(chr2(157:160,:), 1, count);
  t.cineTdel = read_int(chr2(161:164,:), 1, count);
  t.minBW = read_int(chr2(165:168,:), 1, count);
  t.edrThreshold = read_int(chr2(169:172,:), 1, count);
  t.numAPs = read_int(chr2(173:176,:), 1, count);
  t.sizeAP0 = read_int(chr2(177:180,:), 1, count);
  t.sizeAP1 = read_int(chr2(181:184,:), 1, count);
  t.sizeAP2 = read_int(chr2(185:188,:), 1, count);
  t.sizeAP3 = read_int(chr2(189:192,:), 1, count);
  t.numTPSmemBds = read_int(chr2(193:196,:), 1, count);
  t.sizeTPSmemBd0 = read_int(chr2(197:200,:), 1, count);
  t.sizeTPSmemBd1 = read_int(chr2(201:204,:), 1, count);
  t.sizeTPSmemBd2 = read_int(chr2(205:208,:), 1, count);
  t.sizeTPSmemBd3 = read_int(chr2(209:212,:), 1, count);
  t.sizeTPSmemBd4 = read_int(chr2(213:216,:), 1, count);
  t.numRcvrs = read_int(chr2(217:220,:), 1, count);

function [t, outpos] = read_TD_COIL_CFG(chr, inpos, count)
  outpos = inpos + 64 * count;
  chr2=reshape(chr(inpos:inpos+count*64-1), 64, []);
  t.coilName = read_char(chr2(1:16,:), 1, count*16);
  t.korecName = read_char(chr2(17:20,:), 1, count*4);
  t.coilType = read_int(chr2(21:24,:), 1, count);
  t.extremity = read_short(chr2(25:26,:), 1, count);
  t.cableLoss = read_float(chr2(29:32,:), 1, count);
  t.coilLoss = read_float(chr2(33:36,:), 1, count);
  t.reconScale = read_float(chr2(37:40,:), 1, count);
  t.linearQuad = read_int(chr2(41:44,:), 1, count);
  t.multiCoil = read_short(chr2(45:46,:), 1, count);
  t.numRec = read_int(chr2(49:52,:), 1, count);
  t.startRec = read_int(chr2(53:56,:), 1, count);
  t.endRec = read_int(chr2(57:60,:), 1, count);
  t.mcPortEnable = read_int(chr2(61:64,:), 1, count);

function [t, outpos] = read_TD_FS_CFG(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.field_strength = read_float(chr2(1:4,:), 1, count);

function [t, outpos] = read_TOOLSDATA_INFO(chr, inpos, count)
  outpos = inpos + 1248 * count;
  chr2=reshape(chr(inpos:inpos+count*1248-1), 1248, []);
  t.mrCfg = read_TD_MR_CFG(chr2(1:220,:), 1, count);
  t.coilCfg = read_TD_COIL_CFG(chr2(221:1244,:), 1, count*16);
  t.fsCfg = read_TD_FS_CFG(chr2(1245:1248,:), 1, count);

function [t, outpos] = read_TOOLSDATA(chr, inpos, count)
  outpos = inpos + 2048 * count;
  chr2=reshape(chr(inpos:inpos+count*2048-1), 2048, []);
  t.toolsdataInfo = read_TOOLSDATA_INFO(chr2(1:1248,:), 1, count);
  t.toolsdataBuffer = read_char(chr2(1:2048,:), 1, count*2048);

function [t, outpos] = read_OP_NMRID_TYPE(chr, inpos, count)
  [t, outpos] = read_char(chr, inpos, count*(12));

function [t, outpos] = read_OP_HDR1_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.rev = read_n16(chr2(1:2,:), 1, count);
  t.length = read_n16(chr2(3:4,:), 1, count);
  t.req_nmrid = read_OP_NMRID_TYPE(chr2(5:16,:), 1, count);
  t.resp_nmrid = read_OP_NMRID_TYPE(chr2(17:28,:), 1, count);
  t.opcode = read_n16(chr2(29:30,:), 1, count);
  t.packet_type = read_n16(chr2(31:32,:), 1, count);
  t.seq_num = read_n16(chr2(33:34,:), 1, count);
  t.status = read_n32(chr2(37:40,:), 1, count);

function [t, outpos] = read_OP_HDR_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.rev = read_s8(chr2(1:1,:), 1, count);
  t.endian = read_s8(chr2(2:2,:), 1, count);
  t.length = read_n16(chr2(3:4,:), 1, count);
  t.req_nmrid = read_OP_NMRID_TYPE(chr2(5:16,:), 1, count);
  t.resp_nmrid = read_OP_NMRID_TYPE(chr2(17:28,:), 1, count);
  t.opcode = read_n16(chr2(29:30,:), 1, count);
  t.packet_type = read_n16(chr2(31:32,:), 1, count);
  t.seq_num = read_n16(chr2(33:34,:), 1, count);
  t.pad = read_n16(chr2(35:36,:), 1, count);
  t.status = read_n32(chr2(37:40,:), 1, count);

function [t, outpos] = read_struct_tm(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.tm_sec = read_int(chr2(1:4,:), 1, count);
  t.tm_min = read_int(chr2(5:8,:), 1, count);
  t.tm_hour = read_int(chr2(9:12,:), 1, count);
  t.tm_mday = read_int(chr2(13:16,:), 1, count);
  t.tm_mon = read_int(chr2(17:20,:), 1, count);
  t.tm_year = read_int(chr2(21:24,:), 1, count);
  t.tm_wday = read_int(chr2(25:28,:), 1, count);
  t.tm_yday = read_int(chr2(29:32,:), 1, count);
  t.tm_isdst = read_int(chr2(33:36,:), 1, count);

function [t, outpos] = read_GEtimespec(chr, inpos, count)
  [t, outpos] = read_struct_timespec(chr, inpos, count);

function [t, outpos] = read_ChannelTransTableEntryType(chr, inpos, count)
  outpos = inpos + 236 * count;
  chr2=reshape(chr(inpos:inpos+count*236-1), 236, []);
  t.logicalCoilName = read_s8(chr2(1:128,:), 1, count*128);
  t.clinicalCoilName = read_s8(chr2(129:160,:), 1, count*32);
  t.configUID = read_n32(chr2(161:164,:), 1, count);
  t.coilConnector = read_s32(chr2(165:168,:), 1, count);
  t.isActiveScanConfig = read_n32(chr2(169:172,:), 1, count);
  t.channelTranslationMap = read_s16(chr2(173:236,:), 1, count*32);

function [t, outpos] = read_INSTALL_COIL_INFO(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.coilCode = read_char(chr2(1:40,:), 1, count*40);
  t.isInCoilDatabase = read_int(chr2(41:44,:), 1, count);

function [t, outpos] = read_INSTALL_COIL_CONNECTOR_INFO(chr, inpos, count)
  outpos = inpos + 184 * count;
  chr2=reshape(chr(inpos:inpos+count*184-1), 184, []);
  t.connector = read_int(chr2(1:4,:), 1, count);
  t.needsInstall = read_int(chr2(5:8,:), 1, count);
  t.installCoilInfo = read_INSTALL_COIL_INFO(chr2(9:184,:), 1, count*4);

function [t, outpos] = read_COIL_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 1560 * count;
  chr2=reshape(chr(inpos:inpos+count*1560-1), 1560, []);
  t.coilName = read_char(chr2(1:16,:), 1, count*16);
  t.GEcoilName = read_char(chr2(17:40,:), 1, count*24);
  t.pureCorrection = read_short(chr2(41:42,:), 1, count);
  t.maxNumOfReceivers = read_int(chr2(45:48,:), 1, count);
  t.coilType = read_int(chr2(49:52,:), 1, count);
  t.fastTGmode = read_int(chr2(53:56,:), 1, count);
  t.fastTGstartTA = read_int(chr2(57:60,:), 1, count);
  t.fastTGstartRG = read_int(chr2(61:64,:), 1, count);
  t.nuclide = read_int(chr2(65:68,:), 1, count);
  t.tRPAvolumeRecEnable = read_int(chr2(69:72,:), 1, count);
  t.pureCompatible = read_int(chr2(73:76,:), 1, count);
  t.aps1StartTA = read_int(chr2(77:80,:), 1, count);
  t.cflStartTA = read_int(chr2(81:84,:), 1, count);
  t.cfhSensitiveAnatomy = read_int(chr2(85:88,:), 1, count);
  t.cableLoss = read_float(chr2(89:92,:), 1, count);
  t.coilLoss = read_float(chr2(93:96,:), 1, count);
  t.reconScale = read_float(chr2(97:100,:), 1, count);
  t.autoshimFOV = read_float(chr2(101:104,:), 1, count);
  t.coilWeights = read_float(chr2(105:616,:), 1, count*128);
  t.cttEntry = read_ChannelTransTableEntryType(chr2(617:1560,:), 1, count*4);

function [t, outpos] = read_APPLICATION_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 192 * count;
  chr2=reshape(chr(inpos:inpos+count*192-1), 192, []);
  t.aps1StartTA = read_int(chr2(1:4,:), 1, count);
  t.cflStartTA = read_int(chr2(5:8,:), 1, count);
  t.AScfPatLocChangeRL = read_int(chr2(9:12,:), 1, count);
  t.AScfPatLocChangeAP = read_int(chr2(13:16,:), 1, count);
  t.AScfPatLocChangeSI = read_int(chr2(17:20,:), 1, count);
  t.TGpatLocChangeRL = read_int(chr2(21:24,:), 1, count);
  t.TGpatLocChangeAP = read_int(chr2(25:28,:), 1, count);
  t.TGpatLocChangeSI = read_int(chr2(29:32,:), 1, count);
  t.autoshimFOV = read_int(chr2(33:36,:), 1, count);
  t.fastTGstartTA = read_int(chr2(37:40,:), 1, count);
  t.fastTGstartRG = read_int(chr2(41:44,:), 1, count);
  t.fastTGmode = read_int(chr2(45:48,:), 1, count);
  t.cfhSensitiveAnatomy = read_int(chr2(49:52,:), 1, count);
  t.aps1Mod = read_int(chr2(53:56,:), 1, count);
  t.aps1Plane = read_int(chr2(57:60,:), 1, count);
  t.pureCompatible = read_int(chr2(61:64,:), 1, count);
  t.maxFOV = read_int(chr2(65:68,:), 1, count);
  t.assetThresh = read_int(chr2(69:72,:), 1, count);
  t.scic_a_used = read_int(chr2(73:76,:), 1, count);
  t.scic_s_used = read_int(chr2(77:80,:), 1, count);
  t.scic_c_used = read_int(chr2(81:84,:), 1, count);
  t.aps1ModFOV = read_float(chr2(85:88,:), 1, count);
  t.aps1ModPStloc = read_float(chr2(89:92,:), 1, count);
  t.aps1ModPSrloc = read_float(chr2(93:96,:), 1, count);
  t.opthickPSMod = read_float(chr2(97:100,:), 1, count);
  t.pureScale = read_float(chr2(101:104,:), 1, count);
  t.pureCorrectionThreshold = read_float(chr2(105:108,:), 1, count);
  t.scic_a = read_float(chr2(109:136,:), 1, count*7);
  t.scic_s = read_float(chr2(137:164,:), 1, count*7);
  t.scic_c = read_float(chr2(165:192,:), 1, count*7);

function [t, outpos] = read_APPLICATION_CONFIG_HDR(chr, inpos, count)
  outpos = inpos + 220 * count;
  chr2=reshape(chr(inpos:inpos+count*220-1), 220, []);
  t.error = read_int(chr2(1:4,:), 1, count);
  t.clinicalName = read_char(chr2(5:28,:), 1, count*24);
  t.appConfig = read_APPLICATION_CONFIG_PARAM_TYPE(chr2(29:220,:), 1, count);

function [t, outpos] = read_COIL_INFO(chr, inpos, count)
  outpos = inpos + 96 * count;
  chr2=reshape(chr(inpos:inpos+count*96-1), 96, []);
  t.coilName = read_s8(chr2(1:32,:), 1, count*32);
  t.txIndexPri = read_s32(chr2(33:36,:), 1, count);
  t.txIndexSec = read_s32(chr2(37:40,:), 1, count);
  t.rxCoilType = read_n32(chr2(41:44,:), 1, count);
  t.hubIndex = read_n32(chr2(45:48,:), 1, count);
  t.rxNucleus = read_n32(chr2(49:52,:), 1, count);
  t.aps1Mod = read_n32(chr2(53:56,:), 1, count);
  t.aps1ModPlane = read_n32(chr2(57:60,:), 1, count);
  t.coilSepDir = read_n32(chr2(61:64,:), 1, count);
  t.assetCalThreshold = read_n32(chr2(65:68,:), 1, count);
  t.aps1ModFov = read_f32(chr2(69:72,:), 1, count);
  t.aps1ModSlThick = read_f32(chr2(73:76,:), 1, count);
  t.aps1ModPsTloc = read_f32(chr2(77:80,:), 1, count);
  t.aps1ModPsRloc = read_f32(chr2(81:84,:), 1, count);
  t.autoshimFov = read_f32(chr2(85:88,:), 1, count);
  t.assetCalMaxFov = read_f32(chr2(89:92,:), 1, count);
  t.maxB1Rms = read_f32(chr2(93:96,:), 1, count);

function [t, outpos] = read_TX_COIL_INFO(chr, inpos, count)
  outpos = inpos + 164 * count;
  chr2=reshape(chr(inpos:inpos+count*164-1), 164, []);
  t.coilAtten = read_s32(chr2(1:4,:), 1, count);
  t.txCoilType = read_n32(chr2(5:8,:), 1, count);
  t.txPosition = read_n32(chr2(9:12,:), 1, count);
  t.txNucleus = read_n32(chr2(13:16,:), 1, count);
  t.txAmp = read_n32(chr2(17:20,:), 1, count);
  t.maxB1Peak = read_f32(chr2(21:24,:), 1, count);
  t.maxB1Squared = read_f32(chr2(25:28,:), 1, count);
  t.cableLoss = read_f32(chr2(29:32,:), 1, count);
  t.coilLoss = read_f32(chr2(33:36,:), 1, count);
  t.reflCoeffSquared = read_f32(chr2(37:76,:), 1, count*10);
  t.reflCoeffMassOffset = read_f32(chr2(77:80,:), 1, count);
  t.reflCoeffCurveType = read_f32(chr2(81:84,:), 1, count);
  t.exposedMass = read_f32(chr2(85:116,:), 1, count*8);
  t.jstd = read_f32(chr2(117:164,:), 1, count*12);

function [t, outpos] = read_PSD_COIL_INFO(chr, inpos, count)
  outpos = inpos + 3564 * count;
  chr2=reshape(chr(inpos:inpos+count*3564-1), 3564, []);
  t.imgRcvCoilInfo = read_COIL_INFO(chr2(1:960,:), 1, count*10);
  t.volRcvCoilInfo = read_COIL_INFO(chr2(961:1920,:), 1, count*10);
  t.txCoilInfo = read_TX_COIL_INFO(chr2(1921:2740,:), 1, count*5);
  t.txCoilInfoAdult = read_TX_COIL_INFO(chr2(2741:3560,:), 1, count*5);
  t.numCoils = read_int(chr2(3561:3564,:), 1, count);

function [t, outpos] = read_MR_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 196 * count;
  chr2=reshape(chr(inpos:inpos+count*196-1), 196, []);
  t.ampCalHead = read_int(chr2(1:4,:), 1, count);
  t.ampCalBody = read_int(chr2(5:8,:), 1, count);
  t.ampCalMns = read_int(chr2(9:12,:), 1, count);
  t.maxGradShim = read_int(chr2(13:16,:), 1, count);
  t.edrThreshold = read_int(chr2(17:20,:), 1, count);
  t.fieldStrength = read_int(chr2(21:24,:), 1, count);
  t.broadBandXcvr = read_char(chr2(25:29,:), 1, count*5);
  t.dfmXshim = read_int(chr2(33:36,:), 1, count);
  t.dfmYshim = read_int(chr2(37:40,:), 1, count);
  t.dfmZshim = read_int(chr2(41:44,:), 1, count);
  t.dfm_shim_scale = read_int(chr2(45:48,:), 1, count);
  t.dfmZ2shim = read_int(chr2(49:52,:), 1, count);
  t.isZ2 = read_int(chr2(53:56,:), 1, count);
  t.isZ2autoshim = read_int(chr2(57:60,:), 1, count);
  t.isZ2tempUpdate = read_int(chr2(61:64,:), 1, count);
  t.scannerMode = read_int(chr2(65:68,:), 1, count);
  t.compress = read_int(chr2(69:72,:), 1, count);
  t.VeryHighFieldScale = read_int(chr2(73:76,:), 1, count);
  t.fileFormatRev = read_int(chr2(77:80,:), 1, count);
  t.lineFreq = read_int(chr2(81:84,:), 1, count);
  t.specRFamp = read_char(chr2(85:89,:), 1, count*5);
  t.trDither = read_char(chr2(90:94,:), 1, count*5);
  t.rfBodyVectorZ = read_int(chr2(97:100,:), 1, count);
  t.rfBodyLength = read_int(chr2(101:104,:), 1, count);
  t.rfBodyRadius = read_int(chr2(105:108,:), 1, count);
  t.rfHeadVectorY = read_int(chr2(109:112,:), 1, count);
  t.rfHeadVectorZ = read_int(chr2(113:116,:), 1, count);
  t.rfHeadLength = read_int(chr2(117:120,:), 1, count);
  t.rfHeadRadius = read_int(chr2(121:124,:), 1, count);
  t.isoVectorZ = read_int(chr2(125:128,:), 1, count);
  t.tableLimit = read_int(chr2(129:132,:), 1, count);
  t.begTravel = read_int(chr2(133:136,:), 1, count);
  t.endTravel = read_int(chr2(137:140,:), 1, count);
  t.hpdl = read_int(chr2(141:144,:), 1, count);
  t.bpdl = read_int(chr2(145:148,:), 1, count);
  t.hpsl = read_int(chr2(149:152,:), 1, count);
  t.bpsl = read_int(chr2(153:156,:), 1, count);
  t.hpv = read_int(chr2(157:160,:), 1, count);
  t.bpv = read_int(chr2(161:164,:), 1, count);
  t.hqpc = read_float(chr2(165:168,:), 1, count);
  t.bqpc = read_float(chr2(169:172,:), 1, count);
  t.hllr = read_int(chr2(173:176,:), 1, count);
  t.bllr = read_int(chr2(177:180,:), 1, count);
  t.netLoss = read_float(chr2(181:184,:), 1, count);
  t.fixedHWtdel = read_int(chr2(185:188,:), 1, count);
  t.cineTdel = read_int(chr2(189:192,:), 1, count);
  t.minBW = read_int(chr2(193:196,:), 1, count);

function [t, outpos] = read_GRADIENT_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.GCoilType = read_int(chr2(1:4,:), 1, count);
  t.z2FSAmp = read_float(chr2(5:8,:), 1, count);
  t.z2full = read_float(chr2(9:12,:), 1, count);
  t.SRMode = read_int(chr2(13:16,:), 1, count);

function [t, outpos] = read_SUITE_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 42 * count;
  chr2=reshape(chr(inpos:inpos+count*42-1), 42, []);
  t.suiteId = read_char(chr2(1:7,:), 1, count*7);
  t.hospitalName = read_char(chr2(8:42,:), 1, count*35);

function [t, outpos] = read_HOST_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hostName = read_char(chr2(1:5,:), 1, count*5);
  t.UniqueSystemID = read_char(chr2(6:22,:), 1, count*17);
  t.ServiceID = read_char(chr2(23:39,:), 1, count*17);
  t.MobileLocationNumber = read_char(chr2(40:44,:), 1, count*5);

function [t, outpos] = read_PURE_CONFIG_PARAM_TYPE(chr, inpos, count)
  outpos = inpos + 28 * count;
  chr2=reshape(chr(inpos:inpos+count*28-1), 28, []);
  t.pure_noise_threshold = read_int(chr2(1:4,:), 1, count);
  t.pure_intensity_scale = read_int(chr2(5:8,:), 1, count);
  t.pure_weight_radius = read_int(chr2(9:12,:), 1, count);
  t.pure_kernelsize_xy = read_int(chr2(13:16,:), 1, count);
  t.pure_kernelsize_z = read_int(chr2(17:20,:), 1, count);
  t.pure_fit_order = read_int(chr2(21:24,:), 1, count);
  t.pure_filter = read_int(chr2(25:28,:), 1, count);

function [t, outpos] = read_EMULATOR_DATAFILE_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 668 * count;
  chr2=reshape(chr(inpos:inpos+count*668-1), 668, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.r1 = read_int(chr2(41:168,:), 1, count*32);
  t.ad_peak = read_int(chr2(169:296,:), 1, count*32);
  t.overrange = read_int(chr2(297:424,:), 1, count*32);
  t.rcvChan = read_int(chr2(425:552,:), 1, count*32);
  t.trans_atten = read_int(chr2(553:556,:), 1, count);
  t.r2 = read_int(chr2(557:560,:), 1, count);
  t.ctr_freq = read_int(chr2(561:564,:), 1, count);
  t.datapoints = read_int(chr2(565:568,:), 1, count);
  t.emulator_datafile = read_char(chr2(569:668,:), 1, count*100);

function [t, outpos] = read_centerRAS(chr, inpos, count)
  outpos = inpos + 12 * count;
  chr2=reshape(chr(inpos:inpos+count*12-1), 12, []);
  t.centerR = read_f32(chr2(1:4,:), 1, count);
  t.centerA = read_f32(chr2(5:8,:), 1, count);
  t.centerS = read_f32(chr2(9:12,:), 1, count);

function [t, outpos] = read_MxStartInfo(chr, inpos, count)
  outpos = inpos + 232 * count;
  chr2=reshape(chr(inpos:inpos+count*232-1), 232, []);
  t.centerFrequency = read_int(chr2(1:4,:), 1, count);
  t.transmitGain = read_int(chr2(5:8,:), 1, count);
  t.analogReceiveGain = read_int(chr2(9:12,:), 1, count);
  t.digitalReceiveGain = read_int(chr2(13:16,:), 1, count);
  t.receiverNoiseStdDev = read_float(chr2(17:144,:), 1, count*32);
  t.latestCenterFrequency = read_int(chr2(145:148,:), 1, count);
  t.runCenterFrequencyCourse = read_int(chr2(149:152,:), 1, count);
  t.runCenterFrequencyFine = read_int(chr2(153:156,:), 1, count);
  t.runTransmitGain = read_int(chr2(157:160,:), 1, count);
  t.runAutoShim = read_int(chr2(161:164,:), 1, count);
  t.runReceiverNoise = read_int(chr2(165:168,:), 1, count);
  t.runReceiveGain = read_int(chr2(169:172,:), 1, count);
  t.xShim = read_short(chr2(173:174,:), 1, count);
  t.yShim = read_short(chr2(175:176,:), 1, count);
  t.zShim = read_short(chr2(177:178,:), 1, count);
  t.mxReachable = read_short(chr2(179:180,:), 1, count);
  t.reuse = read_char(chr2(181:232,:), 1, count*52);

function [t, outpos] = read_MxDoneInfo(chr, inpos, count)
  outpos = inpos + 176 * count;
  chr2=reshape(chr(inpos:inpos+count*176-1), 176, []);
  t.centerFrequency = read_int(chr2(1:4,:), 1, count);
  t.transmitGain = read_int(chr2(5:8,:), 1, count);
  t.analogReceiveGain = read_int(chr2(9:12,:), 1, count);
  t.digitalReceiveGain = read_int(chr2(13:16,:), 1, count);
  t.receiverNoiseStdDev = read_float(chr2(17:144,:), 1, count*32);
  t.autoMode = read_s32(chr2(145:148,:), 1, count);
  t.saveCenterFrequency = read_s32(chr2(149:152,:), 1, count);
  t.saveTransmitGain = read_s32(chr2(153:156,:), 1, count);
  t.saveAutoShim = read_s32(chr2(157:160,:), 1, count);
  t.saveReceiverNoise = read_s32(chr2(161:164,:), 1, count);
  t.saveReceiveGain = read_s32(chr2(165:168,:), 1, count);
  t.xShim = read_short(chr2(169:170,:), 1, count);
  t.yShim = read_short(chr2(171:172,:), 1, count);
  t.zShim = read_short(chr2(173:174,:), 1, count);

function [t, outpos] = read_OP_PSC_START_TYPE(chr, inpos, count)
  outpos = inpos + 2100 * count;
  chr2=reshape(chr(inpos:inpos+count*2100-1), 2100, []);
  t.rdbm_run_number = read_s32(chr2(1:4,:), 1, count);
  t.active_psd_pid = read_s32(chr2(5:8,:), 1, count);
  t.exam_number = read_s32(chr2(9:12,:), 1, count);
  t.time_stamp = read_GEtimespec(chr2(13:20,:), 1, count);
  t.research_mode = read_s32(chr2(21:24,:), 1, count);
  t.fautoshim = read_s32(chr2(25:28,:), 1, count);
  t.fmultiGroup = read_s32(chr2(29:32,:), 1, count);
  t.scanCenterRAS = read_centerRAS(chr2(33:44,:), 1, count);
  t.tablePosition = read_f32(chr2(45:48,:), 1, count);
  t.sequence_no = read_s32(chr2(49:52,:), 1, count);
  t.scan_pressed = read_s32(chr2(53:56,:), 1, count);
  t.shimCenterRAS = read_centerRAS(chr2(57:80,:), 1, count*2);
  t.prescanFov = read_s32(chr2(81:84,:), 1, count);
  t.prescanSlabThick = read_f32(chr2(85:88,:), 1, count);
  t.force_aps = read_s32(chr2(89:92,:), 1, count);
  t.mx_info = read_MxStartInfo(chr2(93:324,:), 1, count);
  t.contrast_flag = read_s16(chr2(325:326,:), 1, count);
  t.coilConfigParam = read_COIL_CONFIG_PARAM_TYPE(chr2(329:1888,:), 1, count);
  t.mrConfigParam = read_MR_CONFIG_PARAM_TYPE(chr2(1889:2084,:), 1, count);
  t.gradientConfigParam = read_GRADIENT_CONFIG_PARAM_TYPE(chr2(2085:2100,:), 1, count);

function [t, outpos] = read_OP_PSC_DONE_TYPE(chr, inpos, count)
  outpos = inpos + 244 * count;
  chr2=reshape(chr(inpos:inpos+count*244-1), 244, []);
  t.r1 = read_s32(chr2(1:4,:), 1, count);
  t.r2 = read_s32(chr2(5:8,:), 1, count);
  t.tg = read_s32(chr2(9:12,:), 1, count);
  t.ax = read_s32(chr2(13:16,:), 1, count);
  t.recon_scale = read_f32(chr2(17:24,:), 1, count*2);
  t.status = read_s32(chr2(25:28,:), 1, count);
  t.cancel = read_s32(chr2(29:32,:), 1, count);
  t.opcode = read_s32(chr2(33:36,:), 1, count);
  t.line_width = read_s32(chr2(37:40,:), 1, count);
  t.ws_flip = read_s32(chr2(41:44,:), 1, count);
  t.supp_lvl = read_s32(chr2(45:48,:), 1, count);
  t.spectro_flag = read_s32(chr2(49:52,:), 1, count);
  t.message = read_s32(chr2(53:56,:), 1, count);
  t.pscsaved = read_s32(chr2(57:60,:), 1, count);
  t.psc_full_aps = read_s32(chr2(61:64,:), 1, count);
  t.mx_info = read_MxDoneInfo(chr2(65:240,:), 1, count);
  t.measured_tg = read_s32(chr2(241:244,:), 1, count);

function [t, outpos] = read_OP_PSC_COPYPSCD_TYPE(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.seqno_copy_to = read_s32(chr2(1:4,:), 1, count);
  t.seqno_copy_from = read_s32(chr2(5:8,:), 1, count);

function [t, outpos] = read_OP_PSC_COPYDONE_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.status = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_PSC_SCANOP_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.operation = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_MPS_START_TYPE(chr, inpos, count)
  outpos = inpos + 1724 * count;
  chr2=reshape(chr(inpos:inpos+count*1724-1), 1724, []);
  t.req_opcode = read_s32(chr2(1:4,:), 1, count);
  t.pass_desc = read_s32(chr2(5:8,:), 1, count);
  t.req_size = read_s32(chr2(9:12,:), 1, count);
  t.timestamp = read_GEtimespec(chr2(13:20,:), 1, count);
  t.nframes = read_s32(chr2(21:24,:), 1, count);
  t.leftfr1 = read_s32(chr2(25:28,:), 1, count);
  t.leftfr2 = read_s32(chr2(29:32,:), 1, count);
  t.leftpg = read_s32(chr2(33:36,:), 1, count);
  t.leftpt = read_s32(chr2(37:40,:), 1, count);
  t.rtfr1 = read_s32(chr2(41:44,:), 1, count);
  t.rtfr2 = read_s32(chr2(45:48,:), 1, count);
  t.rtpg = read_s32(chr2(49:52,:), 1, count);
  t.rtpt = read_s32(chr2(53:56,:), 1, count);
  t.nexda = read_s32(chr2(57:60,:), 1, count);
  t.mode = read_s32(chr2(61:64,:), 1, count);
  t.power_on = read_s32(chr2(65:68,:), 1, count);
  t.recv_strt = read_s32(chr2(69:72,:), 1, count);
  t.recv_end = read_s32(chr2(73:76,:), 1, count);
  t.recv_plot = read_s32(chr2(77:80,:), 1, count);
  t.opnecho = read_s32(chr2(81:84,:), 1, count);
  t.filter1 = read_s32(chr2(85:88,:), 1, count);
  t.filter2 = read_s32(chr2(89:92,:), 1, count);
  t.noadc = read_s32(chr2(93:96,:), 1, count);
  t.acq_tagwords = read_s32(chr2(97:100,:), 1, count);
  t.fastrcv = read_s32(chr2(101:104,:), 1, count);
  t.passthrough = read_s32(chr2(105:108,:), 1, count);
  t.num_psc_vol = read_s32(chr2(109:112,:), 1, count);
  t.num_psc_slab = read_s32(chr2(113:116,:), 1, count);
  t.num_psc_rcvn_slab = read_s32(chr2(117:120,:), 1, count);
  t.runReceiverNoise = read_s32(chr2(121:124,:), 1, count);
  t.coil_weight = read_f32(chr2(125:636,:), 1, count*128);
  t.receiverNoiseStdDev = read_f32(chr2(637:764,:), 1, count*32);
  t.cttEntry = read_ChannelTransTableEntryType(chr2(765:1708,:), 1, count*4);
  t.psd_ep = read_char(chr2(1709:1724,:), 1, count*16);

function [t, outpos] = read_OP_MPS_START_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1764 * count;
  chr2=reshape(chr(inpos:inpos+count*1764-1), 1764, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_START_TYPE(chr2(41:1764,:), 1, count);

function [t, outpos] = read_OP_MPS_DATA_TYPE(chr, inpos, count)
  outpos = inpos + 1048 * count;
  chr2=reshape(chr(inpos:inpos+count*1048-1), 1048, []);
  t.adpeak = read_s32(chr2(1:8,:), 1, count*2);
  t.bspeak = read_s32(chr2(9:16,:), 1, count*2);
  t.minrec = read_s32(chr2(17:20,:), 1, count);
  t.maxrec = read_s32(chr2(21:24,:), 1, count);
  t.leftdata = read_s16(chr2(25:536,:), 1, count*256);
  t.rightdata = read_s16(chr2(537:1048,:), 1, count*256);

function [t, outpos] = read_OP_MPS_DATA_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1088 * count;
  chr2=reshape(chr(inpos:inpos+count*1088-1), 1088, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_DATA_TYPE(chr2(41:1088,:), 1, count);

function [t, outpos] = read_OP_MPS_NEEDDATA_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);

function [t, outpos] = read_OP_MPS_STOP_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);

function [t, outpos] = read_OP_MPS_TARDSTOP_TYPE(chr, inpos, count)
  outpos = inpos + 1920 * count;
  chr2=reshape(chr(inpos:inpos+count*1920-1), 1920, []);
  t.rcv_cal = read_f32(chr2(1:1664,:), 1, count*416);
  t.noise_mean = read_f32(chr2(1665:1792,:), 1, count*32);
  t.noise_std = read_f32(chr2(1793:1920,:), 1, count*32);

function [t, outpos] = read_OP_MPS_TARDSTOP_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1960 * count;
  chr2=reshape(chr(inpos:inpos+count*1960-1), 1960, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_TARDSTOP_TYPE(chr2(41:1960,:), 1, count);

function [t, outpos] = read_OP_PS_SAT_REPLY_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.error = read_unsigned_int(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_PS_SAT_REPLY_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_SAT_REPLY_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_APS_START_TYPE(chr, inpos, count)
  outpos = inpos + 2136 * count;
  chr2=reshape(chr(inpos:inpos+count*2136-1), 2136, []);
  t.req_opcode = read_s32(chr2(1:4,:), 1, count);
  t.pass_desc = read_s32(chr2(5:8,:), 1, count);
  t.req_size = read_s32(chr2(9:12,:), 1, count);
  t.start_ta = read_s32(chr2(13:16,:), 1, count);
  t.start_rg = read_s32(chr2(17:20,:), 1, count);
  t.start_cf = read_s32(chr2(21:24,:), 1, count);
  t.cf_start_ta = read_s32(chr2(25:28,:), 1, count);
  t.scan_nex = read_s32(chr2(29:32,:), 1, count);
  t.acq_mode = read_s32(chr2(33:36,:), 1, count);
  t.cf_mode = read_s32(chr2(37:40,:), 1, count);
  t.tsp_cfac = read_s32(chr2(41:44,:), 1, count);
  t.tsp_cfaf = read_s32(chr2(45:48,:), 1, count);
  t.slquant = read_s32(chr2(49:52,:), 1, count);
  t.xmtadd = read_s32(chr2(53:96,:), 1, count*11);
  t.xaddmax = read_s32(chr2(97:100,:), 1, count);
  t.max_r2_16mode = read_s32(chr2(101:104,:), 1, count);
  t.max_r2_32mode = read_s32(chr2(105:108,:), 1, count);
  t.ad_min_signal = read_s32(chr2(109:112,:), 1, count);
  t.bamtarget = read_s32(chr2(113:116,:), 1, count);
  t.target = read_s32(chr2(117:120,:), 1, count);
  t.min_signal = read_s32(chr2(121:124,:), 1, count);
  t.max_signal = read_s32(chr2(125:128,:), 1, count);
  t.breath_wait = read_s32(chr2(129:132,:), 1, count);
  t.discard_points = read_s32(chr2(133:136,:), 1, count);
  t.debug = read_s32(chr2(137:140,:), 1, count);
  t.min_hi_points = read_s32(chr2(141:144,:), 1, count);
  t.min_lo_points = read_s32(chr2(145:148,:), 1, count);
  t.min_noise = read_s32(chr2(149:152,:), 1, count);
  t.recv_strt = read_s32(chr2(153:156,:), 1, count);
  t.recv_end = read_s32(chr2(157:160,:), 1, count);
  t.timestamp = read_GEtimespec(chr2(161:168,:), 1, count);
  t.control = read_s32(chr2(169:228,:), 1, count*15);
  t.opnecho = read_s32(chr2(229:232,:), 1, count);
  t.filter1 = read_s32(chr2(233:236,:), 1, count);
  t.filter2 = read_s32(chr2(237:240,:), 1, count);
  t.noadc = read_s32(chr2(241:244,:), 1, count);
  t.nolr = read_s32(chr2(245:248,:), 1, count);
  t.acq_tagwords = read_s32(chr2(249:252,:), 1, count);
  t.cf_min_peak_threshold = read_s32(chr2(253:256,:), 1, count);
  t.suppress_pass = read_s32(chr2(257:260,:), 1, count);
  t.shim_pass = read_s32(chr2(261:264,:), 1, count);
  t.shim_step = read_s32(chr2(265:268,:), 1, count);
  t.spec_pts = read_s32(chr2(269:272,:), 1, count);
  t.spec_width = read_s32(chr2(273:276,:), 1, count);
  t.as_pass = read_s32(chr2(277:280,:), 1, count);
  t.plane_calc3 = read_s32(chr2(281:284,:), 1, count);
  t.def_plane = read_s32(chr2(285:288,:), 1, count);
  t.time_stamp = read_GEtimespec(chr2(289:296,:), 1, count);
  t.asxres = read_s32(chr2(297:300,:), 1, count);
  t.asyres = read_s32(chr2(301:304,:), 1, count);
  t.asbaseline = read_s32(chr2(305:308,:), 1, count);
  t.asrhblank = read_s32(chr2(309:312,:), 1, count);
  t.asptsize = read_s32(chr2(313:316,:), 1, count);
  t.opfov = read_f32(chr2(317:320,:), 1, count);
  t.transpose = read_s32(chr2(321:332,:), 1, count*3);
  t.rotation = read_s32(chr2(333:344,:), 1, count*3);
  t.cur_pos_x = read_s32(chr2(345:348,:), 1, count);
  t.cur_pos_y = read_s32(chr2(349:352,:), 1, count);
  t.cur_pos_z = read_s32(chr2(353:356,:), 1, count);
  t.cur_ax_x = read_s32(chr2(357:360,:), 1, count);
  t.cur_ax_y = read_s32(chr2(361:364,:), 1, count);
  t.cur_ax_z = read_s32(chr2(365:368,:), 1, count);
  t.cur_angle = read_s32(chr2(369:372,:), 1, count);
  t.field_strength = read_s32(chr2(373:376,:), 1, count);
  t.position = read_s32(chr2(377:380,:), 1, count);
  t.ftg_rg = read_s32(chr2(381:384,:), 1, count);
  t.fastrcv = read_s32(chr2(385:388,:), 1, count);
  t.vox_shim = read_s32(chr2(389:392,:), 1, count);
  t.boresize = read_s32(chr2(393:396,:), 1, count);
  t.ftg_start_ta = read_s32(chr2(397:400,:), 1, count);
  t.delta_TG = read_s32(chr2(401:404,:), 1, count);
  t.fseps_iter = read_s32(chr2(405:408,:), 1, count);
  t.fseps_mode = read_s32(chr2(409:412,:), 1, count);
  t.fseps_b0only_last_iter = read_s32(chr2(413:416,:), 1, count);
  t.fseps_slices = read_s32(chr2(417:420,:), 1, count);
  t.fseps_xres = read_s32(chr2(421:424,:), 1, count);
  t.fseps2_iter = read_s32(chr2(425:428,:), 1, count);
  t.isZ2 = read_s32(chr2(429:432,:), 1, count);
  t.isZ2autoshim = read_s32(chr2(433:436,:), 1, count);
  t.apa_coilsel = read_s32(chr2(437:440,:), 1, count);
  t.num_psc_vol = read_s32(chr2(441:444,:), 1, count);
  t.num_psc_slab = read_s32(chr2(445:448,:), 1, count);
  t.num_psc_rcvn_slab = read_s32(chr2(449:452,:), 1, count);
  t.cur_pos_vol2x = read_s32(chr2(453:456,:), 1, count);
  t.cur_pos_vol2y = read_s32(chr2(457:460,:), 1, count);
  t.cur_pos_vol2z = read_s32(chr2(461:464,:), 1, count);
  t.cur_ax_vol2x = read_s32(chr2(465:468,:), 1, count);
  t.cur_ax_vol2y = read_s32(chr2(469:472,:), 1, count);
  t.cur_ax_vol2z = read_s32(chr2(473:476,:), 1, count);
  t.ir_flag = read_s32(chr2(477:480,:), 1, count);
  t.escfh_slices = read_s32(chr2(481:484,:), 1, count);
  t.coil_weight = read_f32(chr2(485:996,:), 1, count*128);
  t.fseps_rcvr = read_s32(chr2(997:1000,:), 1, count);
  t.runReceiverNoise = read_s32(chr2(1001:1004,:), 1, count);
  t.max_rg = read_s32(chr2(1005:1008,:), 1, count);
  t.psc_prep = read_s32(chr2(1009:1012,:), 1, count);
  t.cfh_raise_threshold = read_s32(chr2(1013:1016,:), 1, count);
  t.indicate_single_peak = read_s32(chr2(1017:1020,:), 1, count);
  t.as_std_above_mean = read_f32(chr2(1021:1024,:), 1, count);
  t.as_max_2_floor = read_f32(chr2(1025:1028,:), 1, count);
  t.as_hard_floor = read_f32(chr2(1029:1032,:), 1, count);
  t.as_mask_ratio = read_f32(chr2(1033:1036,:), 1, count);
  t.apa_fov = read_f32(chr2(1037:1040,:), 1, count);
  t.fseps2_zffactor = read_f32(chr2(1041:1044,:), 1, count);
  t.receiverNoiseStdDev = read_f32(chr2(1045:1172,:), 1, count*32);
  t.cttEntry = read_ChannelTransTableEntryType(chr2(1173:2116,:), 1, count*4);
  t.apa_coilname = read_char(chr2(2117:2136,:), 1, count*20);

function [t, outpos] = read_OP_APS_START_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 2176 * count;
  chr2=reshape(chr(inpos:inpos+count*2176-1), 2176, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_START_TYPE(chr2(41:2176,:), 1, count);

function [t, outpos] = read_OP_APS_STOP_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);

function [t, outpos] = read_OP_PS_LOOP_TYPE(chr, inpos, count)
  outpos = inpos + 20 * count;
  chr2=reshape(chr(inpos:inpos+count*20-1), 20, []);
  t.xmitattn = read_s32(chr2(1:4,:), 1, count);
  t.entrylab = read_char(chr2(5:20,:), 1, count*16);

function [t, outpos] = read_OP_PS_LOOP_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 60 * count;
  chr2=reshape(chr(inpos:inpos+count*60-1), 60, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_LOOP_TYPE(chr2(41:60,:), 1, count);

function [t, outpos] = read_OP_APS_DONE_TYPE(chr, inpos, count)
  outpos = inpos + 2120 * count;
  chr2=reshape(chr(inpos:inpos+count*2120-1), 2120, []);
  t.final_ta = read_s32(chr2(1:12,:), 1, count*3);
  t.final_rg = read_s32(chr2(13:24,:), 1, count*3);
  t.final_bs = read_s32(chr2(25:36,:), 1, count*3);
  t.final_cf = read_s32(chr2(37:48,:), 1, count*3);
  t.snr_advise = read_s32(chr2(49:52,:), 1, count);
  t.water = read_s32(chr2(53:64,:), 1, count*3);
  t.lipid = read_s32(chr2(65:76,:), 1, count*3);
  t.maximum = read_s32(chr2(77:88,:), 1, count*3);
  t.signalmax = read_s32(chr2(89:92,:), 1, count);
  t.gx_shim = read_s32(chr2(93:96,:), 1, count);
  t.gy_shim = read_s32(chr2(97:100,:), 1, count);
  t.gz_shim = read_s32(chr2(101:104,:), 1, count);
  t.line_width = read_s32(chr2(105:108,:), 1, count);
  t.ws_flip = read_s32(chr2(109:112,:), 1, count);
  t.supp_lvl = read_s32(chr2(113:116,:), 1, count);
  t.spectro_flag = read_s32(chr2(117:120,:), 1, count);
  t.window = read_s32(chr2(121:124,:), 1, count);
  t.level = read_s32(chr2(125:128,:), 1, count);
  t.panel = read_s32(chr2(129:132,:), 1, count);
  t.recall_roi = read_s32(chr2(133:136,:), 1, count);
  t.cfh_centered_on_left_peak = read_s32(chr2(137:140,:), 1, count);
  t.cfh_single_peak = read_s32(chr2(141:144,:), 1, count);
  t.x = read_f32(chr2(145:156,:), 1, count*3);
  t.y = read_f32(chr2(157:168,:), 1, count*3);
  t.x2 = read_f32(chr2(169:180,:), 1, count*3);
  t.y2 = read_f32(chr2(181:192,:), 1, count*3);
  t.rcv_cal = read_f32(chr2(193:1856,:), 1, count*416);
  t.noise_mean = read_f32(chr2(1857:1984,:), 1, count*32);
  t.noise_std = read_f32(chr2(1985:2112,:), 1, count*32);
  t.vme_addr = read_n16(chr2(2113:2118,:), 1, count*3);
  t.filler = read_n16(chr2(2119:2120,:), 1, count);

function [t, outpos] = read_OP_APS_DONE_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 2160 * count;
  chr2=reshape(chr(inpos:inpos+count*2160-1), 2160, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_DONE_TYPE(chr2(41:2160,:), 1, count);

function [t, outpos] = read_OP_PS_PLOT_TYPE(chr, inpos, count)
  outpos = inpos + 20 * count;
  chr2=reshape(chr(inpos:inpos+count*20-1), 20, []);
  t.command = read_s32(chr2(1:4,:), 1, count);
  t.lplotgain = read_s32(chr2(5:8,:), 1, count);
  t.lplottype = read_s32(chr2(9:12,:), 1, count);
  t.rplotgain = read_s32(chr2(13:16,:), 1, count);
  t.rplottype = read_s32(chr2(17:20,:), 1, count);

function [t, outpos] = read_OP_PS_PLOT_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 60 * count;
  chr2=reshape(chr(inpos:inpos+count*60-1), 60, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_PLOT_TYPE(chr2(41:60,:), 1, count);

function [t, outpos] = read_PRESCAN_HEADER(chr, inpos, count)
  outpos = inpos + 1500 * count;
  chr2=reshape(chr(inpos:inpos+count*1500-1), 1500, []);
  t.command = read_s32(chr2(1:4,:), 1, count);
  t.mps_r1 = read_s32(chr2(5:8,:), 1, count);
  t.mps_r2 = read_s32(chr2(9:12,:), 1, count);
  t.mps_tg = read_s32(chr2(13:16,:), 1, count);
  t.mps_freq = read_n32(chr2(17:20,:), 1, count);
  t.aps_r1 = read_s32(chr2(21:24,:), 1, count);
  t.aps_r2 = read_s32(chr2(25:28,:), 1, count);
  t.aps_tg = read_s32(chr2(29:32,:), 1, count);
  t.aps_freq = read_n32(chr2(33:36,:), 1, count);
  t.scalei = read_f32(chr2(37:40,:), 1, count);
  t.scaleq = read_f32(chr2(41:44,:), 1, count);
  t.snr_warning = read_s32(chr2(45:48,:), 1, count);
  t.aps_or_mps = read_s32(chr2(49:52,:), 1, count);
  t.mps_bitmap = read_s32(chr2(53:56,:), 1, count);
  t.powerspec = read_s8(chr2(57:312,:), 1, count*256);
  t.filler1 = read_s32(chr2(313:316,:), 1, count);
  t.filler2 = read_s32(chr2(317:320,:), 1, count);
  t.xshim = read_s16(chr2(321:322,:), 1, count);
  t.yshim = read_s16(chr2(323:324,:), 1, count);
  t.zshim = read_s16(chr2(325:326,:), 1, count);
  t.recon_enable = read_s16(chr2(327:328,:), 1, count);
  t.autoshim_status = read_s32(chr2(329:332,:), 1, count);
  t.rec_std = read_f32(chr2(333:844,:), 1, count*128);
  t.rec_mean = read_f32(chr2(845:1356,:), 1, count*128);
  t.line_width = read_s32(chr2(1357:1360,:), 1, count);
  t.ws_flip = read_s32(chr2(1361:1364,:), 1, count);
  t.supp_lvl = read_s32(chr2(1365:1368,:), 1, count);
  t.psc_reuse = read_s32(chr2(1369:1372,:), 1, count);
  t.psc_reuse_string = read_char(chr2(1373:1424,:), 1, count*52);
  t.psc_ta = read_s32(chr2(1425:1428,:), 1, count);
  t.phase_correction_status = read_s32(chr2(1429:1432,:), 1, count);
  t.broad_band_select = read_s32(chr2(1433:1436,:), 1, count);
  t.buffer = read_char(chr2(1437:1500,:), 1, count*64);

function [t, outpos] = read_OP_PS_CHEMSAT_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1540 * count;
  chr2=reshape(chr(inpos:inpos+count*1540-1), 1540, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_PRESCAN_HEADER(chr2(41:1540,:), 1, count);

function [t, outpos] = read_OP_PS_SKIP_TYPE(chr, inpos, count)
  outpos = inpos + 320 * count;
  chr2=reshape(chr(inpos:inpos+count*320-1), 320, []);
  t.mps_r1 = read_s32(chr2(1:4,:), 1, count);
  t.mps_r2 = read_s32(chr2(5:8,:), 1, count);
  t.mps_tg = read_s32(chr2(9:12,:), 1, count);
  t.mps_freq = read_n32(chr2(13:16,:), 1, count);
  t.aps_r1 = read_s32(chr2(17:20,:), 1, count);
  t.aps_r2 = read_s32(chr2(21:24,:), 1, count);
  t.aps_tg = read_s32(chr2(25:28,:), 1, count);
  t.aps_freq = read_n32(chr2(29:32,:), 1, count);
  t.snr_warning = read_s32(chr2(33:36,:), 1, count);
  t.aps_or_mps = read_s32(chr2(37:40,:), 1, count);
  t.mps_bitmap = read_s32(chr2(41:44,:), 1, count);
  t.nrec = read_s32(chr2(45:48,:), 1, count);
  t.autoshim_status = read_s32(chr2(49:52,:), 1, count);
  t.scalei = read_f32(chr2(53:56,:), 1, count);
  t.scaleq = read_f32(chr2(57:60,:), 1, count);
  t.noise_mean = read_f32(chr2(61:188,:), 1, count*32);
  t.noise_std = read_f32(chr2(189:316,:), 1, count*32);
  t.phase_correction_status = read_s16(chr2(317:318,:), 1, count);

function [t, outpos] = read_OP_PS_SKIP_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 360 * count;
  chr2=reshape(chr(inpos:inpos+count*360-1), 360, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_SKIP_TYPE(chr2(41:360,:), 1, count);

function [t, outpos] = read_OP_MPS_RECCHAN_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.receiver = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_MPS_RECCHAN_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_RECCHAN_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_MPS_CHGHDW_TYPE(chr, inpos, count)
  outpos = inpos + 20 * count;
  chr2=reshape(chr(inpos:inpos+count*20-1), 20, []);
  t.cmmnd = read_s32(chr2(1:4,:), 1, count);
  t.r1 = read_s32(chr2(5:8,:), 1, count);
  t.r2 = read_n32(chr2(9:12,:), 1, count);
  t.tg = read_n32(chr2(13:16,:), 1, count);
  t.ax = read_n32(chr2(17:20,:), 1, count);

function [t, outpos] = read_OP_MPS_CHGHDW_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 60 * count;
  chr2=reshape(chr(inpos:inpos+count*60-1), 60, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_CHGHDW_TYPE(chr2(41:60,:), 1, count);

function [t, outpos] = read_OP_MPS_WRITEDATA_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.message = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_MPS_WRITEDATA_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_WRITEDATA_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_struct_PS_PSL_ELEM_STRUCT(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.opcode = read_s32(chr2(1:4,:), 1, count);
  t.reply = read_s32(chr2(5:8,:), 1, count);

function [t, outpos] = read_PS_PSL_ELEM(chr, inpos, count)
  [t, outpos] = read_struct_PS_PSL_ELEM_STRUCT(chr, inpos, count);

function [t, outpos] = read_struct_PS_PRL_ELEM_STRUCT(chr, inpos, count)
  outpos = inpos + 12 * count;
  chr2=reshape(chr(inpos:inpos+count*12-1), 12, []);

function [t, outpos] = read_PS_PRL_ELEM(chr, inpos, count)
  [t, outpos] = read_struct_PS_PRL_ELEM_STRUCT(chr, inpos, count);

function [t, outpos] = read_OP_PS_WORK_REQ_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);

function [t, outpos] = read_OP_PS_WORK_REQ_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_WORK_REQ_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_PS_EXEC_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 3040 * count;
  chr2=reshape(chr(inpos:inpos+count*3040-1), 3040, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.rec_buf = read_s8(chr2(41:3040,:), 1, count*3000);

function [t, outpos] = read_OP_PS_TPS_LOG_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.ermes = read_n32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_PS_TPS_LOG_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_PS_TPS_LOG_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_TPS_SNAP_GO_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 40 * count;
  chr2=reshape(chr(inpos:inpos+count*40-1), 40, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);

function [t, outpos] = read_OP_MPS_PRESCANINDEX_CHANGE_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.curr_prescan_index = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_MPS_PRESCANINDEX_CHANGE_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_PRESCANINDEX_CHANGE_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_MPS_LOOP_STATUS_TYPE(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.start_status = read_s32(chr2(1:4,:), 1, count);
  t.stop_status = read_s32(chr2(5:8,:), 1, count);

function [t, outpos] = read_OP_MPS_LOOP_STATUS_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 48 * count;
  chr2=reshape(chr(inpos:inpos+count*48-1), 48, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_MPS_LOOP_STATUS_TYPE(chr2(41:48,:), 1, count);

function [t, outpos] = read_OP_UPDATE_MX_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 216 * count;
  chr2=reshape(chr(inpos:inpos+count*216-1), 216, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_MxDoneInfo(chr2(41:216,:), 1, count);

function [t, outpos] = read_OP_REF_START_TYPE(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.runnumber = read_s32(chr2(1:4,:), 1, count);
  t.autolock = read_s32(chr2(5:8,:), 1, count);

function [t, outpos] = read_OP_REF_START_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 48 * count;
  chr2=reshape(chr(inpos:inpos+count*48-1), 48, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_REF_START_TYPE(chr2(41:48,:), 1, count);

function [t, outpos] = read_OP_XMT_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.nuc = read_s32(chr2(1:4,:), 1, count);
  t.gamma = read_f32(chr2(5:8,:), 1, count);
  t.ax = read_s32(chr2(9:12,:), 1, count);
  t.ermes = read_n32(chr2(13:16,:), 1, count);

function [t, outpos] = read_OP_GRADSHIM_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1656 * count;
  chr2=reshape(chr(inpos:inpos+count*1656-1), 1656, []);
  t.scan_run_num = read_s32(chr2(1:4,:), 1, count);
  t.alloc_ip = read_s32(chr2(5:8,:), 1, count);
  t.sq = read_s32(chr2(9:12,:), 1, count);
  t.psd_id = read_s32(chr2(13:16,:), 1, count);
  t.mode = read_s32(chr2(17:20,:), 1, count);
  t.timestamp = read_GEtimespec(chr2(21:28,:), 1, count);
  t.ermes = read_n32(chr2(29:32,:), 1, count);
  t.exam_number = read_s32(chr2(33:36,:), 1, count);
  t.fautoshim = read_s32(chr2(37:40,:), 1, count);
  t.fmultiGroup = read_s32(chr2(41:44,:), 1, count);
  t.startR = read_f32(chr2(45:48,:), 1, count);
  t.startA = read_f32(chr2(49:52,:), 1, count);
  t.startS = read_f32(chr2(53:56,:), 1, count);
  t.endR = read_f32(chr2(57:60,:), 1, count);
  t.endA = read_f32(chr2(61:64,:), 1, count);
  t.endS = read_f32(chr2(65:68,:), 1, count);
  t.coil_name = read_char(chr2(69:93,:), 1, count*25);
  t.coilConfigParam = read_COIL_CONFIG_PARAM_TYPE(chr2(97:1656,:), 1, count);

function [t, outpos] = read_OP_MODIFY_REQUEST_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 52 * count;
  chr2=reshape(chr(inpos:inpos+count*52-1), 52, []);
  t.r1 = read_s32(chr2(1:4,:), 1, count);
  t.r2 = read_s32(chr2(5:8,:), 1, count);
  t.tg = read_s32(chr2(9:12,:), 1, count);
  t.ax = read_s32(chr2(13:16,:), 1, count);
  t.dx = read_s32(chr2(17:20,:), 1, count);
  t.nuc = read_s32(chr2(21:24,:), 1, count);
  t.gamma = read_f32(chr2(25:28,:), 1, count);
  t.ermes = read_n32(chr2(29:32,:), 1, count);
  t.exciter_number = read_n32(chr2(33:36,:), 1, count);
  t.psd_ep = read_char(chr2(37:52,:), 1, count*16);

function [t, outpos] = read_OP_GET_HW_SETTINGS_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 1644 * count;
  chr2=reshape(chr(inpos:inpos+count*1644-1), 1644, []);
  t.r1 = read_s32(chr2(1:4,:), 1, count);
  t.r2 = read_s32(chr2(5:8,:), 1, count);
  t.tg = read_s32(chr2(9:12,:), 1, count);
  t.ax = read_s32(chr2(13:16,:), 1, count);
  t.nuc = read_s32(chr2(17:20,:), 1, count);
  t.gamma = read_f32(chr2(21:24,:), 1, count);
  t.psd_id = read_s32(chr2(25:28,:), 1, count);
  t.psd_ep = read_s8(chr2(29:44,:), 1, count*16);
  t.ermes = read_n32(chr2(45:48,:), 1, count);
  t.exam_number = read_s32(chr2(49:52,:), 1, count);
  t.exciter_number = read_n32(chr2(53:56,:), 1, count);
  t.coil_name = read_char(chr2(57:81,:), 1, count*25);
  t.coilConfigParam = read_COIL_CONFIG_PARAM_TYPE(chr2(85:1644,:), 1, count);

function [t, outpos] = read_OP_SPEC_SET_GRADSHIM_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 12 * count;
  chr2=reshape(chr(inpos:inpos+count*12-1), 12, []);
  t.gradient = read_int(chr2(1:4,:), 1, count);
  t.value = read_s32(chr2(5:8,:), 1, count);
  t.ermes = read_n32(chr2(9:12,:), 1, count);

function [t, outpos] = read_OP_SPEC_GET_GRADSHIM_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.gx_shim = read_s32(chr2(1:4,:), 1, count);
  t.gy_shim = read_s32(chr2(5:8,:), 1, count);
  t.gz_shim = read_s32(chr2(9:12,:), 1, count);
  t.ermes = read_n32(chr2(13:16,:), 1, count);

function [t, outpos] = read_OP_APS_DFMSHIM_TYPE(chr, inpos, count)
  outpos = inpos + 20 * count;
  chr2=reshape(chr(inpos:inpos+count*20-1), 20, []);
  t.gxshim = read_f32(chr2(1:4,:), 1, count);
  t.gyshim = read_f32(chr2(5:8,:), 1, count);
  t.gzshim = read_f32(chr2(9:12,:), 1, count);
  t.gz2shim = read_f32(chr2(13:16,:), 1, count);
  t.shimchg_status = read_s32(chr2(17:20,:), 1, count);

function [t, outpos] = read_OP_APS_DFMSHIM_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 60 * count;
  chr2=reshape(chr(inpos:inpos+count*60-1), 60, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_DFMSHIM_TYPE(chr2(41:60,:), 1, count);

function [t, outpos] = read_OP_APS_MODAVS_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.gxshim = read_f32(chr2(1:4,:), 1, count);
  t.gyshim = read_f32(chr2(5:8,:), 1, count);
  t.gzshim = read_f32(chr2(9:12,:), 1, count);
  t.shimchg_status = read_s32(chr2(13:16,:), 1, count);

function [t, outpos] = read_OP_APS_MODAVS_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 56 * count;
  chr2=reshape(chr(inpos:inpos+count*56-1), 56, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_MODAVS_TYPE(chr2(41:56,:), 1, count);

function [t, outpos] = read_OP_APS_MODAWS_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.tip_start = read_s32(chr2(1:4,:), 1, count);
  t.tip_delta = read_s32(chr2(5:8,:), 1, count);
  t.tip_step = read_s32(chr2(9:12,:), 1, count);
  t.supchg_status = read_s32(chr2(13:16,:), 1, count);

function [t, outpos] = read_OP_APS_MODAWS_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 56 * count;
  chr2=reshape(chr(inpos:inpos+count*56-1), 56, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_MODAWS_TYPE(chr2(41:56,:), 1, count);

function [t, outpos] = read_OP_APS_PSD_DOWNLOAD_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.flag = read_s32(chr2(1:4,:), 1, count);

function [t, outpos] = read_OP_APS_PSD_DOWNLOAD_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 44 * count;
  chr2=reshape(chr(inpos:inpos+count*44-1), 44, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_PSD_DOWNLOAD_TYPE(chr2(41:44,:), 1, count);

function [t, outpos] = read_OP_APS_ASHIM_START_TYPE(chr, inpos, count)
  outpos = inpos + 132 * count;
  chr2=reshape(chr(inpos:inpos+count*132-1), 132, []);
  t.as_pass = read_s32(chr2(1:4,:), 1, count);
  t.plane_calc3 = read_s32(chr2(5:8,:), 1, count);
  t.def_plane = read_s32(chr2(9:12,:), 1, count);
  t.time_stamp = read_GEtimespec(chr2(13:20,:), 1, count);
  t.asxres = read_s32(chr2(21:24,:), 1, count);
  t.asyres = read_s32(chr2(25:28,:), 1, count);
  t.asbaseline = read_s32(chr2(29:32,:), 1, count);
  t.asrhblank = read_s32(chr2(33:36,:), 1, count);
  t.asptsize = read_s32(chr2(37:40,:), 1, count);
  t.transpose = read_s32(chr2(41:52,:), 1, count*3);
  t.rotation = read_s32(chr2(53:64,:), 1, count*3);
  t.cur_pos_x = read_s32(chr2(65:68,:), 1, count);
  t.cur_pos_y = read_s32(chr2(69:72,:), 1, count);
  t.cur_pos_z = read_s32(chr2(73:76,:), 1, count);
  t.cur_ax_x = read_s32(chr2(77:80,:), 1, count);
  t.cur_ax_y = read_s32(chr2(81:84,:), 1, count);
  t.cur_ax_z = read_s32(chr2(85:88,:), 1, count);
  t.cur_angle = read_s32(chr2(89:92,:), 1, count);
  t.field_strength = read_s32(chr2(93:96,:), 1, count);
  t.position = read_s32(chr2(97:100,:), 1, count);
  t.vox_shim = read_s32(chr2(101:104,:), 1, count);
  t.srec = read_s32(chr2(105:108,:), 1, count);
  t.erec = read_s32(chr2(109:112,:), 1, count);
  t.opfov = read_f32(chr2(113:116,:), 1, count);
  t.as_std_above_mean = read_f32(chr2(117:120,:), 1, count);
  t.as_max_2_floor = read_f32(chr2(121:124,:), 1, count);
  t.as_hard_floor = read_f32(chr2(125:128,:), 1, count);
  t.as_mask_ratio = read_f32(chr2(129:132,:), 1, count);

function [t, outpos] = read_OP_APS_ASHIM_START_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 172 * count;
  chr2=reshape(chr(inpos:inpos+count*172-1), 172, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_ASHIM_START_TYPE(chr2(41:172,:), 1, count);

function [t, outpos] = read_OP_APS_ASHIM_DONE_TYPE(chr, inpos, count)
  outpos = inpos + 100 * count;
  chr2=reshape(chr(inpos:inpos+count*100-1), 100, []);
  t.ermes = read_n32(chr2(1:4,:), 1, count);
  t.window = read_s32(chr2(5:8,:), 1, count);
  t.level = read_s32(chr2(9:12,:), 1, count);
  t.panel = read_s32(chr2(13:16,:), 1, count);
  t.recall_roi = read_s32(chr2(17:20,:), 1, count);
  t.ashim_status = read_s32(chr2(21:32,:), 1, count*3);
  t.x = read_f32(chr2(33:44,:), 1, count*3);
  t.y = read_f32(chr2(45:56,:), 1, count*3);
  t.x2 = read_f32(chr2(57:68,:), 1, count*3);
  t.y2 = read_f32(chr2(69:80,:), 1, count*3);
  t.points_used = read_f32(chr2(81:92,:), 1, count*3);
  t.vme_addr = read_n16(chr2(93:98,:), 1, count*3);
  t.filler = read_n16(chr2(99:100,:), 1, count);

function [t, outpos] = read_OP_APS_ASHIM_DONE_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 140 * count;
  chr2=reshape(chr(inpos:inpos+count*140-1), 140, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_APS_ASHIM_DONE_TYPE(chr2(41:140,:), 1, count);

function [t, outpos] = read_OP_TOOLS_TYPE(chr, inpos, count)
  outpos = inpos + 28 * count;
  chr2=reshape(chr(inpos:inpos+count*28-1), 28, []);
  t.xshim = read_s32(chr2(1:4,:), 1, count);
  t.yshim = read_s32(chr2(5:8,:), 1, count);
  t.zshim = read_s32(chr2(9:12,:), 1, count);
  t.z2shim = read_s32(chr2(13:16,:), 1, count);
  t.zxshim = read_s32(chr2(17:20,:), 1, count);
  t.zyshim = read_s32(chr2(21:24,:), 1, count);
  t.filenum = read_s32(chr2(25:28,:), 1, count);

function [t, outpos] = read_OP_TOOLS_PACK_TYPE(chr, inpos, count)
  outpos = inpos + 68 * count;
  chr2=reshape(chr(inpos:inpos+count*68-1), 68, []);
  t.hdr = read_OP_HDR_TYPE(chr2(1:40,:), 1, count);
  t.req = read_OP_TOOLS_TYPE(chr2(41:68,:), 1, count);

function [t, outpos] = read_AutoSubParam(chr, inpos, count)
  outpos = inpos + 48 * count;
  chr2=reshape(chr(inpos:inpos+count*48-1), 48, []);
  t.seriesUidToSubtract = read_char(chr2(1:32,:), 1, count*32);
  t.imageNoToSubtract = read_int(chr2(33:36,:), 1, count);
  t.destSeriesNo = read_int(chr2(37:40,:), 1, count);
  t.destImageNo = read_int(chr2(41:44,:), 1, count);
  t.dummy = read_int(chr2(45:48,:), 1, count);

function [t, outpos] = read_SUITEDATATYPE(chr, inpos, count)
  outpos = inpos + 464 * count;
  chr2=reshape(chr(inpos:inpos+count*464-1), 464, []);
  t.int_padding2 = read_int(chr2(1:128,:), 1, count*32);
  t.su_uniq = read_short_int(chr2(129:130,:), 1, count);
  t.short_padding = read_short_int(chr2(131:192,:), 1, count*31);
  t.prodid = read_char(chr2(193:205,:), 1, count*13);
  t.su_diskid = read_char(chr2(206:206,:), 1, count);
  t.su_id = read_char(chr2(207:210,:), 1, count*4);
  t.su_verscre = read_char(chr2(211:212,:), 1, count*2);
  t.su_verscur = read_char(chr2(213:214,:), 1, count*2);
  t.su_padding = read_char(chr2(215:464,:), 1, count*250);

function [t, outpos] = read_EXAMDATATYPE(chr, inpos, count)
  outpos = inpos + 1960 * count;
  chr2=reshape(chr(inpos:inpos+count*1960-1), 1960, []);
  t.firstaxtime = read_double(chr2(1:8,:), 1, count);
  t.double_padding = read_double(chr2(9:256,:), 1, count*31);
  t.zerocell = read_float(chr2(257:260,:), 1, count);
  t.cellspace = read_float(chr2(261:264,:), 1, count);
  t.srctodet = read_float(chr2(265:268,:), 1, count);
  t.srctoiso = read_float(chr2(269:272,:), 1, count);
  t.float_padding = read_float(chr2(273:400,:), 1, count*32);
  t.ex_delta_cnt = read_int(chr2(401:404,:), 1, count);
  t.ex_complete = read_int(chr2(405:408,:), 1, count);
  t.ex_seriesct = read_int(chr2(409:412,:), 1, count);
  t.ex_numarch = read_int(chr2(413:416,:), 1, count);
  t.ex_numseries = read_int(chr2(417:420,:), 1, count);
  t.ex_numunser = read_int(chr2(421:424,:), 1, count);
  t.ex_toarchcnt = read_int(chr2(425:428,:), 1, count);
  t.ex_prospcnt = read_int(chr2(429:432,:), 1, count);
  t.ex_modelnum = read_int(chr2(433:436,:), 1, count);
  t.ex_modelcnt = read_int(chr2(437:440,:), 1, count);
  t.int_padding1 = read_int(chr2(441:568,:), 1, count*32);
  t.numcells = read_int(chr2(569:572,:), 1, count);
  t.magstrength = read_int(chr2(573:576,:), 1, count);
  t.patweight = read_int(chr2(577:580,:), 1, count);
  t.ex_datetime = read_int(chr2(581:584,:), 1, count);
  t.ex_lastmod = read_int(chr2(585:588,:), 1, count);
  t.int_padding2 = read_int(chr2(589:696,:), 1, count*27);
  t.ex_no = read_unsigned_short_int(chr2(697:698,:), 1, count);
  t.ex_uniq = read_short_int(chr2(699:700,:), 1, count);
  t.detect = read_short_int(chr2(701:702,:), 1, count);
  t.tubetyp = read_short_int(chr2(703:704,:), 1, count);
  t.dastyp = read_short_int(chr2(705:706,:), 1, count);
  t.num_dcnk = read_short_int(chr2(707:708,:), 1, count);
  t.dcn_len = read_short_int(chr2(709:710,:), 1, count);
  t.dcn_density = read_short_int(chr2(711:712,:), 1, count);
  t.dcn_stepsize = read_short_int(chr2(713:714,:), 1, count);
  t.dcn_shiftcnt = read_short_int(chr2(715:716,:), 1, count);
  t.patage = read_short_int(chr2(717:718,:), 1, count);
  t.patian = read_short_int(chr2(719:720,:), 1, count);
  t.patsex = read_short_int(chr2(721:722,:), 1, count);
  t.ex_format = read_short_int(chr2(723:724,:), 1, count);
  t.trauma = read_short_int(chr2(725:726,:), 1, count);
  t.protocolflag = read_short_int(chr2(727:728,:), 1, count);
  t.study_status = read_short_int(chr2(729:730,:), 1, count);
  t.short_padding = read_short_int(chr2(731:800,:), 1, count*35);
  t.hist = read_char(chr2(801:1057,:), 1, count*257);
  t.refphy = read_char(chr2(1058:1122,:), 1, count*65);
  t.diagrad = read_char(chr2(1123:1187,:), 1, count*65);
  t.operator_new = read_char(chr2(1188:1252,:), 1, count*65);
  t.ex_desc = read_char(chr2(1253:1317,:), 1, count*65);
  t.ex_typ = read_char(chr2(1318:1320,:), 1, count*3);
  t.ex_sysid = read_char(chr2(1321:1329,:), 1, count*9);
  t.ex_alloc_key = read_char(chr2(1330:1342,:), 1, count*13);
  t.ex_diskid = read_char(chr2(1343:1343,:), 1, count);
  t.hospname = read_char(chr2(1344:1376,:), 1, count*33);
  t.ex_suid = read_char(chr2(1377:1380,:), 1, count*4);
  t.ex_verscre = read_char(chr2(1381:1382,:), 1, count*2);
  t.ex_verscur = read_char(chr2(1383:1384,:), 1, count*2);
  t.uniq_sys_id = read_char(chr2(1385:1400,:), 1, count*16);
  t.service_id = read_char(chr2(1401:1416,:), 1, count*16);
  t.mobile_loc = read_char(chr2(1417:1420,:), 1, count*4);
  t.study_uid = read_char(chr2(1421:1452,:), 1, count*32);
  t.refsopcuid = read_char(chr2(1453:1484,:), 1, count*32);
  t.refsopiuid = read_char(chr2(1485:1516,:), 1, count*32);
  t.patnameff = read_char(chr2(1517:1581,:), 1, count*65);
  t.patidff = read_char(chr2(1582:1646,:), 1, count*65);
  t.reqnumff = read_char(chr2(1647:1663,:), 1, count*17);
  t.dateofbirth = read_char(chr2(1664:1672,:), 1, count*9);
  t.mwlstudyuid = read_char(chr2(1673:1704,:), 1, count*32);
  t.mwlstudyid = read_char(chr2(1705:1720,:), 1, count*16);
  t.ex_padding = read_char(chr2(1721:1960,:), 1, count*240);

function [t, outpos] = read_SERIESDATATYPE(chr, inpos, count)
  outpos = inpos + 2560 * count;
  chr2=reshape(chr(inpos:inpos+count*2560-1), 2560, []);
  t.double_padding = read_double(chr2(1:256,:), 1, count*32);
  t.se_pds_a = read_float(chr2(257:260,:), 1, count);
  t.se_pds_c = read_float(chr2(261:264,:), 1, count);
  t.se_pds_u = read_float(chr2(265:268,:), 1, count);
  t.lmhor = read_float(chr2(269:272,:), 1, count);
  t.start_loc = read_float(chr2(273:276,:), 1, count);
  t.end_loc = read_float(chr2(277:280,:), 1, count);
  t.echo1_alpha = read_float(chr2(281:284,:), 1, count);
  t.echo1_beta = read_float(chr2(285:288,:), 1, count);
  t.echo2_alpha = read_float(chr2(289:292,:), 1, count);
  t.echo2_beta = read_float(chr2(293:296,:), 1, count);
  t.echo3_alpha = read_float(chr2(297:300,:), 1, count);
  t.echo3_beta = read_float(chr2(301:304,:), 1, count);
  t.echo4_alpha = read_float(chr2(305:308,:), 1, count);
  t.echo4_beta = read_float(chr2(309:312,:), 1, count);
  t.echo5_alpha = read_float(chr2(313:316,:), 1, count);
  t.echo5_beta = read_float(chr2(317:320,:), 1, count);
  t.echo6_alpha = read_float(chr2(321:324,:), 1, count);
  t.echo6_beta = read_float(chr2(325:328,:), 1, count);
  t.echo7_alpha = read_float(chr2(329:332,:), 1, count);
  t.echo7_beta = read_float(chr2(333:336,:), 1, count);
  t.echo8_alpha = read_float(chr2(337:340,:), 1, count);
  t.echo8_beta = read_float(chr2(341:344,:), 1, count);
  t.float_padding = read_float(chr2(345:472,:), 1, count*32);
  t.se_complete = read_int(chr2(473:476,:), 1, count);
  t.se_numarch = read_int(chr2(477:480,:), 1, count);
  t.se_imagect = read_int(chr2(481:484,:), 1, count);
  t.se_numimages = read_int(chr2(485:488,:), 1, count);
  t.se_delta_cnt = read_int(chr2(489:492,:), 1, count);
  t.se_numunimg = read_int(chr2(493:496,:), 1, count);
  t.se_toarchcnt = read_int(chr2(497:500,:), 1, count);
  t.int_padding1 = read_int(chr2(501:632,:), 1, count*33);
  t.se_datetime = read_int(chr2(633:636,:), 1, count);
  t.se_actual_dt = read_int(chr2(637:640,:), 1, count);
  t.position = read_int(chr2(641:644,:), 1, count);
  t.entry = read_int(chr2(645:648,:), 1, count);
  t.se_lndmrkcnt = read_int(chr2(649:652,:), 1, count);
  t.se_lastmod = read_int(chr2(653:656,:), 1, count);
  t.ExpType = read_int(chr2(657:660,:), 1, count);
  t.TrRest = read_int(chr2(661:664,:), 1, count);
  t.TrActive = read_int(chr2(665:668,:), 1, count);
  t.DumAcq = read_int(chr2(669:672,:), 1, count);
  t.ExptTimePts = read_int(chr2(673:676,:), 1, count);
  t.int_padding2 = read_int(chr2(677:808,:), 1, count*33);
  t.se_exno = read_unsigned_short_int(chr2(809:810,:), 1, count);
  t.echo1_window = read_unsigned_short_int(chr2(811:812,:), 1, count);
  t.echo2_window = read_unsigned_short_int(chr2(813:814,:), 1, count);
  t.echo3_window = read_unsigned_short_int(chr2(815:816,:), 1, count);
  t.echo4_window = read_unsigned_short_int(chr2(817:818,:), 1, count);
  t.echo5_window = read_unsigned_short_int(chr2(819:820,:), 1, count);
  t.echo6_window = read_unsigned_short_int(chr2(821:822,:), 1, count);
  t.echo7_window = read_unsigned_short_int(chr2(823:824,:), 1, count);
  t.echo8_window = read_unsigned_short_int(chr2(825:826,:), 1, count);
  t.echo8_level = read_short_int(chr2(827:828,:), 1, count);
  t.echo7_level = read_short_int(chr2(829:830,:), 1, count);
  t.echo6_level = read_short_int(chr2(831:832,:), 1, count);
  t.echo5_level = read_short_int(chr2(833:834,:), 1, count);
  t.echo4_level = read_short_int(chr2(835:836,:), 1, count);
  t.echo3_level = read_short_int(chr2(837:838,:), 1, count);
  t.echo2_level = read_short_int(chr2(839:840,:), 1, count);
  t.echo1_level = read_short_int(chr2(841:842,:), 1, count);
  t.se_no = read_short_int(chr2(843:844,:), 1, count);
  t.se_typ = read_short_int(chr2(845:846,:), 1, count);
  t.se_source = read_short_int(chr2(847:848,:), 1, count);
  t.se_plane = read_short_int(chr2(849:850,:), 1, count);
  t.scan_type = read_short_int(chr2(851:852,:), 1, count);
  t.se_uniq = read_short_int(chr2(853:854,:), 1, count);
  t.se_contrast = read_short_int(chr2(855:856,:), 1, count);
  t.se_pseq = read_short_int(chr2(857:858,:), 1, count);
  t.se_sortorder = read_short_int(chr2(859:860,:), 1, count);
  t.se_nacq = read_short_int(chr2(861:862,:), 1, count);
  t.xbasest = read_short_int(chr2(863:864,:), 1, count);
  t.xbaseend = read_short_int(chr2(865:866,:), 1, count);
  t.xenhst = read_short_int(chr2(867:868,:), 1, count);
  t.xenhend = read_short_int(chr2(869:870,:), 1, count);
  t.table_entry = read_short_int(chr2(871:872,:), 1, count);
  t.SwingAngle = read_short_int(chr2(873:874,:), 1, count);
  t.LateralOffset = read_short_int(chr2(875:876,:), 1, count);
  t.GradientCoil = read_short_int(chr2(877:878,:), 1, count);
  t.se_subtype = read_short_int(chr2(879:880,:), 1, count);
  t.BWRT = read_short_int(chr2(881:882,:), 1, count);
  t.assetcal_serno = read_short_int(chr2(883:884,:), 1, count);
  t.assetcal_scnno = read_short_int(chr2(885:886,:), 1, count);
  t.content_qualifn = read_short_int(chr2(887:888,:), 1, count);
  t.purecal_serno = read_short_int(chr2(889:890,:), 1, count);
  t.purecal_scnno = read_short_int(chr2(891:892,:), 1, count);
  t.ideal = read_short_int(chr2(893:894,:), 1, count);
  t.short_padding = read_short_int(chr2(895:960,:), 1, count*33);
  t.se_verscre = read_char(chr2(961:962,:), 1, count*2);
  t.se_verscur = read_char(chr2(963:964,:), 1, count*2);
  t.se_suid = read_char(chr2(965:968,:), 1, count*4);
  t.se_alloc_key = read_char(chr2(969:981,:), 1, count*13);
  t.se_diskid = read_char(chr2(982:982,:), 1, count);
  t.se_desc = read_char(chr2(983:1047,:), 1, count*65);
  t.pr_sysid = read_char(chr2(1048:1056,:), 1, count*9);
  t.pansysid = read_char(chr2(1057:1065,:), 1, count*9);
  t.anref = read_char(chr2(1066:1068,:), 1, count*3);
  t.prtcl = read_char(chr2(1069:1093,:), 1, count*25);
  t.start_ras = read_char(chr2(1094:1094,:), 1, count);
  t.end_ras = read_char(chr2(1095:1095,:), 1, count);
  t.series_uid = read_char(chr2(1096:1127,:), 1, count*32);
  t.landmark_uid = read_char(chr2(1128:1159,:), 1, count*32);
  t.equipmnt_uid = read_char(chr2(1160:1191,:), 1, count*32);
  t.refsopcuids = read_char(chr2(1192:1223,:), 1, count*32);
  t.refsopiuids = read_char(chr2(1224:1255,:), 1, count*32);
  t.schacitval = read_char(chr2(1256:1271,:), 1, count*16);
  t.schacitdesc = read_char(chr2(1272:1287,:), 1, count*16);
  t.schacitmea = read_char(chr2(1288:1351,:), 1, count*64);
  t.schprocstdesc = read_char(chr2(1352:1416,:), 1, count*65);
  t.schprocstid = read_char(chr2(1417:1432,:), 1, count*16);
  t.reqprocstid = read_char(chr2(1433:1448,:), 1, count*16);
  t.perprocstid = read_char(chr2(1449:1464,:), 1, count*16);
  t.perprocstdesc = read_char(chr2(1465:1529,:), 1, count*65);
  t.reqprocstid2 = read_char(chr2(1530:1545,:), 1, count*16);
  t.reqprocstid3 = read_char(chr2(1546:1561,:), 1, count*16);
  t.schprocstid2 = read_char(chr2(1562:1577,:), 1, count*16);
  t.schprocstid3 = read_char(chr2(1578:1593,:), 1, count*16);
  t.refImgUID = read_char(chr2(1594:1721,:), 1, count*128);
  t.PdgmStr = read_char(chr2(1722:1785,:), 1, count*64);
  t.PdgmDesc = read_char(chr2(1786:2041,:), 1, count*256);
  t.PdgmUID = read_char(chr2(2042:2105,:), 1, count*64);
  t.ApplName = read_char(chr2(2106:2121,:), 1, count*16);
  t.ApplVer = read_char(chr2(2122:2137,:), 1, count*16);
  t.asset_appl = read_char(chr2(2138:2149,:), 1, count*12);
  t.scic_a = read_char(chr2(2150:2181,:), 1, count*32);
  t.scic_s = read_char(chr2(2182:2213,:), 1, count*32);
  t.scic_c = read_char(chr2(2214:2245,:), 1, count*32);
  t.pure_cfg_params = read_char(chr2(2246:2309,:), 1, count*64);
  t.se_padding = read_char(chr2(2310:2560,:), 1, count*251);

function [t, outpos] = read_MRIMAGEDATATYPE(chr, inpos, count)
  outpos = inpos + 2448 * count;
  chr2=reshape(chr(inpos:inpos+count*2448-1), 2448, []);
  t.autoSubParam = read_AutoSubParam(chr2(1:48,:), 1, count);
  t.double_padding = read_double(chr2(49:304,:), 1, count*32);
  t.dfov = read_float(chr2(305:308,:), 1, count);
  t.dfov_rect = read_float(chr2(309:312,:), 1, count);
  t.sctime = read_float(chr2(313:316,:), 1, count);
  t.slthick = read_float(chr2(317:320,:), 1, count);
  t.scanspacing = read_float(chr2(321:324,:), 1, count);
  t.loc = read_float(chr2(325:328,:), 1, count);
  t.tbldlta = read_float(chr2(329:332,:), 1, count);
  t.nex = read_float(chr2(333:336,:), 1, count);
  t.reptime = read_float(chr2(337:340,:), 1, count);
  t.saravg = read_float(chr2(341:344,:), 1, count);
  t.sarpeak = read_float(chr2(345:348,:), 1, count);
  t.pausetime = read_float(chr2(349:352,:), 1, count);
  t.vbw = read_float(chr2(353:356,:), 1, count);
  t.user0 = read_float(chr2(357:360,:), 1, count);
  t.user1 = read_float(chr2(361:364,:), 1, count);
  t.user2 = read_float(chr2(365:368,:), 1, count);
  t.user3 = read_float(chr2(369:372,:), 1, count);
  t.user4 = read_float(chr2(373:376,:), 1, count);
  t.user5 = read_float(chr2(377:380,:), 1, count);
  t.user6 = read_float(chr2(381:384,:), 1, count);
  t.user7 = read_float(chr2(385:388,:), 1, count);
  t.user8 = read_float(chr2(389:392,:), 1, count);
  t.user9 = read_float(chr2(393:396,:), 1, count);
  t.user10 = read_float(chr2(397:400,:), 1, count);
  t.user11 = read_float(chr2(401:404,:), 1, count);
  t.user12 = read_float(chr2(405:408,:), 1, count);
  t.user13 = read_float(chr2(409:412,:), 1, count);
  t.user14 = read_float(chr2(413:416,:), 1, count);
  t.user15 = read_float(chr2(417:420,:), 1, count);
  t.user16 = read_float(chr2(421:424,:), 1, count);
  t.user17 = read_float(chr2(425:428,:), 1, count);
  t.user18 = read_float(chr2(429:432,:), 1, count);
  t.user19 = read_float(chr2(433:436,:), 1, count);
  t.user20 = read_float(chr2(437:440,:), 1, count);
  t.user21 = read_float(chr2(441:444,:), 1, count);
  t.user22 = read_float(chr2(445:448,:), 1, count);
  t.proj_ang = read_float(chr2(449:452,:), 1, count);
  t.concat_sat = read_float(chr2(453:456,:), 1, count);
  t.user23 = read_float(chr2(457:460,:), 1, count);
  t.user24 = read_float(chr2(461:464,:), 1, count);
  t.x_axis_rot = read_float(chr2(465:468,:), 1, count);
  t.y_axis_rot = read_float(chr2(469:472,:), 1, count);
  t.z_axis_rot = read_float(chr2(473:476,:), 1, count);
  t.ihtagfa = read_float(chr2(477:480,:), 1, count);
  t.ihtagor = read_float(chr2(481:484,:), 1, count);
  t.ihbspti = read_float(chr2(485:488,:), 1, count);
  t.rtia_timer = read_float(chr2(489:492,:), 1, count);
  t.fps = read_float(chr2(493:496,:), 1, count);
  t.vencscale = read_float(chr2(497:500,:), 1, count);
  t.dbdt = read_float(chr2(501:504,:), 1, count);
  t.dbdtper = read_float(chr2(505:508,:), 1, count);
  t.estdbdtper = read_float(chr2(509:512,:), 1, count);
  t.estdbdtts = read_float(chr2(513:516,:), 1, count);
  t.saravghead = read_float(chr2(517:520,:), 1, count);
  t.neg_scanspacing = read_float(chr2(521:524,:), 1, count);
  t.user25 = read_float(chr2(525:528,:), 1, count);
  t.user26 = read_float(chr2(529:532,:), 1, count);
  t.user27 = read_float(chr2(533:536,:), 1, count);
  t.user28 = read_float(chr2(537:540,:), 1, count);
  t.user29 = read_float(chr2(541:544,:), 1, count);
  t.user30 = read_float(chr2(545:548,:), 1, count);
  t.user31 = read_float(chr2(549:552,:), 1, count);
  t.user32 = read_float(chr2(553:556,:), 1, count);
  t.user33 = read_float(chr2(557:560,:), 1, count);
  t.user34 = read_float(chr2(561:564,:), 1, count);
  t.user35 = read_float(chr2(565:568,:), 1, count);
  t.user36 = read_float(chr2(569:572,:), 1, count);
  t.user37 = read_float(chr2(573:576,:), 1, count);
  t.user38 = read_float(chr2(577:580,:), 1, count);
  t.user39 = read_float(chr2(581:584,:), 1, count);
  t.user40 = read_float(chr2(585:588,:), 1, count);
  t.user41 = read_float(chr2(589:592,:), 1, count);
  t.user42 = read_float(chr2(593:596,:), 1, count);
  t.user43 = read_float(chr2(597:600,:), 1, count);
  t.user44 = read_float(chr2(601:604,:), 1, count);
  t.user45 = read_float(chr2(605:608,:), 1, count);
  t.user46 = read_float(chr2(609:612,:), 1, count);
  t.user47 = read_float(chr2(613:616,:), 1, count);
  t.user48 = read_float(chr2(617:620,:), 1, count);
  t.RegressorVal = read_float(chr2(621:624,:), 1, count);
  t.SliceAsset = read_float(chr2(625:628,:), 1, count);
  t.PhaseAsset = read_float(chr2(629:632,:), 1, count);
  t.sarValues = read_float(chr2(633:648,:), 1, count*4);
  t.shim_fov = read_float(chr2(649:656,:), 1, count*2);
  t.shim_ctr_R = read_float(chr2(657:664,:), 1, count*2);
  t.shim_ctr_A = read_float(chr2(665:672,:), 1, count*2);
  t.shim_ctr_S = read_float(chr2(673:680,:), 1, count*2);
  t.dim_X = read_float(chr2(681:684,:), 1, count);
  t.dim_Y = read_float(chr2(685:688,:), 1, count);
  t.pixsize_X = read_float(chr2(689:692,:), 1, count);
  t.pixsize_Y = read_float(chr2(693:696,:), 1, count);
  t.ctr_R = read_float(chr2(697:700,:), 1, count);
  t.ctr_A = read_float(chr2(701:704,:), 1, count);
  t.ctr_S = read_float(chr2(705:708,:), 1, count);
  t.norm_R = read_float(chr2(709:712,:), 1, count);
  t.norm_A = read_float(chr2(713:716,:), 1, count);
  t.norm_S = read_float(chr2(717:720,:), 1, count);
  t.tlhc_R = read_float(chr2(721:724,:), 1, count);
  t.tlhc_A = read_float(chr2(725:728,:), 1, count);
  t.tlhc_S = read_float(chr2(729:732,:), 1, count);
  t.trhc_R = read_float(chr2(733:736,:), 1, count);
  t.trhc_A = read_float(chr2(737:740,:), 1, count);
  t.trhc_S = read_float(chr2(741:744,:), 1, count);
  t.brhc_R = read_float(chr2(745:748,:), 1, count);
  t.brhc_A = read_float(chr2(749:752,:), 1, count);
  t.brhc_S = read_float(chr2(753:756,:), 1, count);
  t.float_padding = read_float(chr2(757:888,:), 1, count*33);
  t.cal_fldstr = read_unsigned_int(chr2(889:892,:), 1, count);
  t.user_usage_tag = read_unsigned_int(chr2(893:896,:), 1, count);
  t.user_fill_mapMSW = read_unsigned_int(chr2(897:900,:), 1, count);
  t.user_fill_mapLSW = read_unsigned_int(chr2(901:904,:), 1, count);
  t.im_archived = read_int(chr2(905:908,:), 1, count);
  t.im_complete = read_int(chr2(909:912,:), 1, count);
  t.int_padding1 = read_int(chr2(913:1048,:), 1, count*34);
  t.im_datetime = read_int(chr2(1049:1052,:), 1, count);
  t.im_actual_dt = read_int(chr2(1053:1056,:), 1, count);
  t.tr = read_int(chr2(1057:1060,:), 1, count);
  t.ti = read_int(chr2(1061:1064,:), 1, count);
  t.te = read_int(chr2(1065:1068,:), 1, count);
  t.te2 = read_int(chr2(1069:1072,:), 1, count);
  t.tdel = read_int(chr2(1073:1076,:), 1, count);
  t.mindat = read_int(chr2(1077:1080,:), 1, count);
  t.obplane = read_int(chr2(1081:1084,:), 1, count);
  t.slocfov = read_int(chr2(1085:1088,:), 1, count);
  t.obsolete1 = read_int(chr2(1089:1092,:), 1, count);
  t.obsolete2 = read_int(chr2(1093:1096,:), 1, count);
  t.user_bitmap = read_int(chr2(1097:1100,:), 1, count);
  t.iopt = read_int(chr2(1101:1104,:), 1, count);
  t.psd_datetime = read_int(chr2(1105:1108,:), 1, count);
  t.rawrunnum = read_int(chr2(1109:1112,:), 1, count);
  t.intr_del = read_int(chr2(1113:1116,:), 1, count);
  t.im_lastmod = read_int(chr2(1117:1120,:), 1, count);
  t.im_pds_a = read_int(chr2(1121:1124,:), 1, count);
  t.im_pds_c = read_int(chr2(1125:1128,:), 1, count);
  t.im_pds_u = read_int(chr2(1129:1132,:), 1, count);
  t.thresh_min1 = read_int(chr2(1133:1136,:), 1, count);
  t.thresh_max1 = read_int(chr2(1137:1140,:), 1, count);
  t.thresh_min2 = read_int(chr2(1141:1144,:), 1, count);
  t.thresh_max2 = read_int(chr2(1145:1148,:), 1, count);
  t.numslabs = read_int(chr2(1149:1152,:), 1, count);
  t.locsperslab = read_int(chr2(1153:1156,:), 1, count);
  t.overlaps = read_int(chr2(1157:1160,:), 1, count);
  t.slop_int_4 = read_int(chr2(1161:1164,:), 1, count);
  t.dfax = read_int(chr2(1165:1168,:), 1, count);
  t.fphase = read_int(chr2(1169:1172,:), 1, count);
  t.offsetfreq = read_int(chr2(1173:1176,:), 1, count);
  t.b_value = read_int(chr2(1177:1180,:), 1, count);
  t.iopt2 = read_int(chr2(1181:1184,:), 1, count);
  t.ihtagging = read_int(chr2(1185:1188,:), 1, count);
  t.ihtagspc = read_int(chr2(1189:1192,:), 1, count);
  t.ihfcineim = read_int(chr2(1193:1196,:), 1, count);
  t.ihfcinent = read_int(chr2(1197:1200,:), 1, count);
  t.num_seg = read_int(chr2(1201:1204,:), 1, count);
  t.oprtarr = read_int(chr2(1205:1208,:), 1, count);
  t.averages = read_int(chr2(1209:1212,:), 1, count);
  t.station_index = read_int(chr2(1213:1216,:), 1, count);
  t.station_total = read_int(chr2(1217:1220,:), 1, count);
  t.iopt3 = read_int(chr2(1221:1224,:), 1, count);
  t.delAcq = read_int(chr2(1225:1228,:), 1, count);
  t.rxmbloblen = read_int(chr2(1229:1232,:), 1, count);
  t.im_no = read_int(chr2(1237:1240,:), 1, count);
  t.imgrx = read_int(chr2(1241:1244,:), 1, count);
  t.int_padding2 = read_int(chr2(1245:1368,:), 1, count*31);
  t.imatrix_X = read_short_int(chr2(1369:1370,:), 1, count);
  t.imatrix_Y = read_short_int(chr2(1371:1372,:), 1, count);
  t.im_exno = read_unsigned_short_int(chr2(1373:1374,:), 1, count);
  t.img_window = read_unsigned_short_int(chr2(1375:1376,:), 1, count);
  t.img_level = read_short_int(chr2(1377:1378,:), 1, count);
  t.numecho = read_short_int(chr2(1379:1380,:), 1, count);
  t.echonum = read_short_int(chr2(1381:1382,:), 1, count);
  t.im_uniq = read_short_int(chr2(1383:1384,:), 1, count);
  t.im_seno = read_short_int(chr2(1385:1386,:), 1, count);
  t.contmode = read_short_int(chr2(1387:1388,:), 1, count);
  t.serrx = read_short_int(chr2(1389:1390,:), 1, count);
  t.screenformat = read_short_int(chr2(1391:1392,:), 1, count);
  t.plane = read_short_int(chr2(1393:1394,:), 1, count);
  t.im_compress = read_short_int(chr2(1395:1396,:), 1, count);
  t.im_scouttype = read_short_int(chr2(1397:1398,:), 1, count);
  t.contig = read_short_int(chr2(1399:1400,:), 1, count);
  t.hrtrate = read_short_int(chr2(1401:1402,:), 1, count);
  t.trgwindow = read_short_int(chr2(1403:1404,:), 1, count);
  t.imgpcyc = read_short_int(chr2(1405:1406,:), 1, count);
  t.obsolete3 = read_short_int(chr2(1407:1408,:), 1, count);
  t.obsolete4 = read_short_int(chr2(1409:1410,:), 1, count);
  t.obsolete5 = read_short_int(chr2(1411:1412,:), 1, count);
  t.mr_flip = read_short_int(chr2(1413:1414,:), 1, count);
  t.cphase = read_short_int(chr2(1415:1416,:), 1, count);
  t.swappf = read_short_int(chr2(1417:1418,:), 1, count);
  t.pauseint = read_short_int(chr2(1419:1420,:), 1, count);
  t.obsolete6 = read_short_int(chr2(1421:1422,:), 1, count);
  t.obsolete7 = read_short_int(chr2(1423:1424,:), 1, count);
  t.obsolete8 = read_short_int(chr2(1425:1426,:), 1, count);
  t.not_used_1 = read_short_int(chr2(1427:1428,:), 1, count);
  t.imode = read_short_int(chr2(1429:1430,:), 1, count);
  t.pseq = read_short_int(chr2(1431:1432,:), 1, count);
  t.pseqmode = read_short_int(chr2(1433:1434,:), 1, count);
  t.ctyp = read_short_int(chr2(1435:1436,:), 1, count);
  t.surfctyp = read_short_int(chr2(1437:1438,:), 1, count);
  t.surfcext = read_short_int(chr2(1439:1440,:), 1, count);
  t.supp_tech = read_short_int(chr2(1441:1442,:), 1, count);
  t.slquant = read_short_int(chr2(1443:1444,:), 1, count);
  t.gpre = read_short_int(chr2(1445:1446,:), 1, count);
  t.satbits = read_short_int(chr2(1447:1448,:), 1, count);
  t.scic = read_short_int(chr2(1449:1450,:), 1, count);
  t.satxloc1 = read_short_int(chr2(1451:1452,:), 1, count);
  t.satxloc2 = read_short_int(chr2(1453:1454,:), 1, count);
  t.satyloc1 = read_short_int(chr2(1455:1456,:), 1, count);
  t.satyloc2 = read_short_int(chr2(1457:1458,:), 1, count);
  t.satzloc1 = read_short_int(chr2(1459:1460,:), 1, count);
  t.satzloc2 = read_short_int(chr2(1461:1462,:), 1, count);
  t.satxthick = read_short_int(chr2(1463:1464,:), 1, count);
  t.satythick = read_short_int(chr2(1465:1466,:), 1, count);
  t.satzthick = read_short_int(chr2(1467:1468,:), 1, count);
  t.flax = read_short_int(chr2(1469:1470,:), 1, count);
  t.venc = read_short_int(chr2(1471:1472,:), 1, count);
  t.thk_disclmr = read_short_int(chr2(1473:1474,:), 1, count);
  t.obsolete9 = read_short_int(chr2(1475:1476,:), 1, count);
  t.obsolete10 = read_short_int(chr2(1477:1478,:), 1, count);
  t.image_type = read_short_int(chr2(1479:1480,:), 1, count);
  t.vas_collapse = read_short_int(chr2(1481:1482,:), 1, count);
  t.proj_alg = read_short_int(chr2(1483:1484,:), 1, count);
  t.echo_trn_len = read_short_int(chr2(1485:1486,:), 1, count);
  t.frac_echo = read_short_int(chr2(1487:1488,:), 1, count);
  t.prep_pulse = read_short_int(chr2(1489:1490,:), 1, count);
  t.cphasenum = read_short_int(chr2(1491:1492,:), 1, count);
  t.var_echo = read_short_int(chr2(1493:1494,:), 1, count);
  t.scanactno = read_short_int(chr2(1495:1496,:), 1, count);
  t.vasflags = read_short_int(chr2(1497:1498,:), 1, count);
  t.integrity = read_short_int(chr2(1499:1500,:), 1, count);
  t.freq_dir = read_short_int(chr2(1501:1502,:), 1, count);
  t.vas_mode = read_short_int(chr2(1503:1504,:), 1, count);
  t.pscopts = read_short_int(chr2(1505:1506,:), 1, count);
  t.obsolete11 = read_short_int(chr2(1507:1508,:), 1, count);
  t.obsolete12 = read_short_int(chr2(1509:1510,:), 1, count);
  t.obsolete13 = read_short_int(chr2(1511:1512,:), 1, count);
  t.unoriginal = read_short_int(chr2(1513:1514,:), 1, count);
  t.interleaves = read_short_int(chr2(1515:1516,:), 1, count);
  t.effechospace = read_short_int(chr2(1517:1518,:), 1, count);
  t.viewsperseg = read_short_int(chr2(1519:1520,:), 1, count);
  t.rbpm = read_short_int(chr2(1521:1522,:), 1, count);
  t.rtpoint = read_short_int(chr2(1523:1524,:), 1, count);
  t.rcvrtype = read_short_int(chr2(1525:1526,:), 1, count);
  t.sarMode = read_short_int(chr2(1527:1528,:), 1, count);
  t.dBdtMode = read_short_int(chr2(1529:1530,:), 1, count);
  t.govBody = read_short_int(chr2(1531:1532,:), 1, count);
  t.sarDefinition = read_short_int(chr2(1533:1534,:), 1, count);
  t.no_shimvol = read_short_int(chr2(1535:1536,:), 1, count);
  t.shim_vol_type = read_short_int(chr2(1537:1538,:), 1, count);
  t.current_phase = read_short_int(chr2(1539:1540,:), 1, count);
  t.art_level = read_short_int(chr2(1541:1542,:), 1, count);
  t.slice_group_number = read_short_int(chr2(1543:1544,:), 1, count);
  t.number_of_slice_groups = read_short_int(chr2(1545:1546,:), 1, count);
  t.show_in_autoview = read_short_int(chr2(1547:1548,:), 1, count);
  t.slice_number_inGroup = read_short_int(chr2(1549:1550,:), 1, count);
  t.specnuc = read_short_int(chr2(1551:1552,:), 1, count);
  t.short_padding = read_short_int(chr2(1553:1632,:), 1, count*40);
  t.psdname = read_char(chr2(1633:1665,:), 1, count*33);
  t.proj_name = read_char(chr2(1666:1678,:), 1, count*13);
  t.psd_iname = read_char(chr2(1679:1691,:), 1, count*13);
  t.im_diskid = read_char(chr2(1692:1692,:), 1, count);
  t.pdid = read_char(chr2(1693:1706,:), 1, count*14);
  t.im_suid = read_char(chr2(1707:1710,:), 1, count*4);
  t.contrastIV = read_char(chr2(1711:1727,:), 1, count*17);
  t.contrastOral = read_char(chr2(1728:1744,:), 1, count*17);
  t.loc_ras = read_char(chr2(1745:1745,:), 1, count);
  t.forimgrev = read_char(chr2(1746:1749,:), 1, count*4);
  t.cname = read_char(chr2(1750:1766,:), 1, count*17);
  t.im_verscre = read_char(chr2(1767:1768,:), 1, count*2);
  t.im_verscur = read_char(chr2(1769:1770,:), 1, count*2);
  t.im_alloc_key = read_char(chr2(1771:1783,:), 1, count*13);
  t.ref_img = read_char(chr2(1784:1784,:), 1, count);
  t.sum_img = read_char(chr2(1785:1785,:), 1, count);
  t.filter_mode = read_char(chr2(1786:1801,:), 1, count*16);
  t.slop_str_2 = read_char(chr2(1802:1817,:), 1, count*16);
  t.image_uid = read_char(chr2(1818:1849,:), 1, count*32);
  t.sop_uid = read_char(chr2(1850:1881,:), 1, count*32);
  t.GEcname = read_char(chr2(1882:1905,:), 1, count*24);
  t.usedCoilData = read_char(chr2(1906:2005,:), 1, count*100);
  t.astcalseriesuid = read_char(chr2(2006:2037,:), 1, count*32);
  t.purecalseriesuid = read_char(chr2(2038:2069,:), 1, count*32);
  t.xml_psc_shm_vol = read_char(chr2(2070:2101,:), 1, count*32);
  t.rxmpath = read_char(chr2(2102:2165,:), 1, count*64);
  t.psdnameannot = read_char(chr2(2166:2198,:), 1, count*33);
  t.img_hdr_padding = read_char(chr2(2199:2448,:), 1, count*250);

function [t, outpos] = read_dbkey_exam_type(chr, inpos, count)
  [t, outpos] = read_unsigned_short_int(chr, inpos, count);

function [t, outpos] = read_dbkey_magic_type(chr, inpos, count)
  [t, outpos] = read_short_int(chr, inpos, count);

function [t, outpos] = read_dbkey_series_type(chr, inpos, count)
  [t, outpos] = read_short_int(chr, inpos, count);

function [t, outpos] = read_dbkey_image_type(chr, inpos, count)
  [t, outpos] = read_int(chr, inpos, count);

function [t, outpos] = read_struct_DbKeyNamer(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.su_id = read_char(chr2(1:4,:), 1, count*4);
  t.mg_no = read_dbkey_magic_type(chr2(5:6,:), 1, count);
  t.ex_no = read_dbkey_exam_type(chr2(7:8,:), 1, count);
  t.se_no = read_dbkey_series_type(chr2(9:10,:), 1, count);
  t.im_no = read_dbkey_image_type(chr2(13:16,:), 1, count);

function [t, outpos] = read_DbKey(chr, inpos, count)
  [t, outpos] = read_struct_DbKeyNamer(chr, inpos, count);

function [t, outpos] = read_BAM_addr(chr, inpos, count)
  [t, outpos] = read_n64(chr, inpos, count);

function [t, outpos] = read_BAM_ptr(chr, inpos, count)
  [t, outpos] = read_uintptr_t(chr, inpos, count);

function [t, outpos] = read_BAM_size(chr, inpos, count)
  [t, outpos] = read_size_t(chr, inpos, count);

function [t, outpos] = read_BA_ST_BLOCK_TYPE(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.t_size = read_BAM_size(chr2(1:4,:), 1, count);
  t.st_size = read_BAM_size(chr2(5:8,:), 1, count);
  t.lt_size = read_BAM_size(chr2(9:12,:), 1, count);
  t.lag = read_BAM_size(chr2(13:16,:), 1, count);

function [t, outpos] = read_RDB_MULTI_RCV_TYPE(chr, inpos, count)
  outpos = inpos + 4 * count;
  chr2=reshape(chr(inpos:inpos+count*4-1), 4, []);
  t.start_rcv = read_short(chr2(1:2,:), 1, count);
  t.stop_rcv = read_short(chr2(3:4,:), 1, count);

function [t, outpos] = read_RDB_HEADER_REC(chr, inpos, count)
  outpos = inpos + 4096 * count;
  chr2=reshape(chr(inpos:inpos+count*4096-1), 4096, []);
  t.rdb_hdr_rdbm_rev = read_float(chr2(1:4,:), 1, count);
  t.rdb_hdr_run_int = read_int(chr2(5:8,:), 1, count);
  t.rdb_hdr_scan_seq = read_short(chr2(9:10,:), 1, count);
  t.rdb_hdr_run_char = read_char(chr2(11:16,:), 1, count*6);
  t.rdb_hdr_scan_date = read_char(chr2(17:26,:), 1, count*10);
  t.rdb_hdr_scan_time = read_char(chr2(27:34,:), 1, count*8);
  t.rdb_hdr_logo = read_char(chr2(35:44,:), 1, count*10);
  t.rdb_hdr_file_contents = read_short(chr2(45:46,:), 1, count);
  t.rdb_hdr_lock_mode = read_short(chr2(47:48,:), 1, count);
  t.rdb_hdr_dacq_ctrl = read_short(chr2(49:50,:), 1, count);
  t.rdb_hdr_recon_ctrl = read_short(chr2(51:52,:), 1, count);
  t.rdb_hdr_exec_ctrl = read_unsigned_short(chr2(53:54,:), 1, count);
  t.rdb_hdr_scan_type = read_short(chr2(55:56,:), 1, count);
  t.rdb_hdr_data_collect_type = read_short(chr2(57:58,:), 1, count);
  t.rdb_hdr_data_format = read_short(chr2(59:60,:), 1, count);
  t.rdb_hdr_recon = read_short(chr2(61:62,:), 1, count);
  t.rdb_hdr_datacq = read_short(chr2(63:64,:), 1, count);
  t.rdb_hdr_npasses = read_short(chr2(65:66,:), 1, count);
  t.rdb_hdr_npomp = read_short(chr2(67:68,:), 1, count);
  t.rdb_hdr_nslices = read_unsigned_short(chr2(69:70,:), 1, count);
  t.rdb_hdr_nechoes = read_short(chr2(71:72,:), 1, count);
  t.rdb_hdr_navs = read_short(chr2(73:74,:), 1, count);
  t.rdb_hdr_nframes = read_short(chr2(75:76,:), 1, count);
  t.rdb_hdr_baseline_views = read_short(chr2(77:78,:), 1, count);
  t.rdb_hdr_hnover = read_short(chr2(79:80,:), 1, count);
  t.rdb_hdr_frame_size = read_unsigned_short(chr2(81:82,:), 1, count);
  t.rdb_hdr_point_size = read_short(chr2(83:84,:), 1, count);
  t.rdb_hdr_vquant = read_short(chr2(85:86,:), 1, count);
  t.rdb_hdr_cheart = read_short(chr2(87:88,:), 1, count);
  t.rdb_hdr_ctr = read_float(chr2(89:92,:), 1, count);
  t.rdb_hdr_ctrr = read_float(chr2(93:96,:), 1, count);
  t.rdb_hdr_initpass = read_short(chr2(97:98,:), 1, count);
  t.rdb_hdr_incrpass = read_short(chr2(99:100,:), 1, count);
  t.rdb_hdr_method_ctrl = read_short(chr2(101:102,:), 1, count);
  t.rdb_hdr_da_xres = read_unsigned_short(chr2(103:104,:), 1, count);
  t.rdb_hdr_da_yres = read_short(chr2(105:106,:), 1, count);
  t.rdb_hdr_rc_xres = read_short(chr2(107:108,:), 1, count);
  t.rdb_hdr_rc_yres = read_short(chr2(109:110,:), 1, count);
  t.rdb_hdr_im_size = read_short(chr2(111:112,:), 1, count);
  t.rdb_hdr_rc_zres = read_int(chr2(113:116,:), 1, count);
  t.rdb_hdr_raw_pass_size_deprecated = read_int(chr2(117:120,:), 1, count);
  t.rdb_hdr_sspsave_deprecated = read_int(chr2(121:124,:), 1, count);
  t.rdb_hdr_udasave_deprecated = read_int(chr2(125:128,:), 1, count);
  t.rdb_hdr_fermi_radius = read_float(chr2(129:132,:), 1, count);
  t.rdb_hdr_fermi_width = read_float(chr2(133:136,:), 1, count);
  t.rdb_hdr_fermi_ecc = read_float(chr2(137:140,:), 1, count);
  t.rdb_hdr_clip_min = read_float(chr2(141:144,:), 1, count);
  t.rdb_hdr_clip_max = read_float(chr2(145:148,:), 1, count);
  t.rdb_hdr_default_offset = read_float(chr2(149:152,:), 1, count);
  t.rdb_hdr_xoff = read_float(chr2(153:156,:), 1, count);
  t.rdb_hdr_yoff = read_float(chr2(157:160,:), 1, count);
  t.rdb_hdr_nwin = read_float(chr2(161:164,:), 1, count);
  t.rdb_hdr_ntran = read_float(chr2(165:168,:), 1, count);
  t.rdb_hdr_scalei = read_float(chr2(169:172,:), 1, count);
  t.rdb_hdr_scaleq = read_float(chr2(173:176,:), 1, count);
  t.rdb_hdr_rotation = read_short(chr2(177:178,:), 1, count);
  t.rdb_hdr_transpose = read_short(chr2(179:180,:), 1, count);
  t.rdb_hdr_kissoff_views = read_short(chr2(181:182,:), 1, count);
  t.rdb_hdr_slblank = read_short(chr2(183:184,:), 1, count);
  t.rdb_hdr_gradcoil = read_short(chr2(185:186,:), 1, count);
  t.rdb_hdr_ddaover = read_short(chr2(187:188,:), 1, count);
  t.rdb_hdr_sarr = read_short(chr2(189:190,:), 1, count);
  t.rdb_hdr_fd_tr = read_short(chr2(191:192,:), 1, count);
  t.rdb_hdr_fd_te = read_short(chr2(193:194,:), 1, count);
  t.rdb_hdr_fd_ctrl = read_short(chr2(195:196,:), 1, count);
  t.rdb_hdr_algor_num = read_short(chr2(197:198,:), 1, count);
  t.rdb_hdr_fd_df_dec = read_short(chr2(199:200,:), 1, count);
  t.rdb_hdr_dab = read_RDB_MULTI_RCV_TYPE(chr2(201:216,:), 1, count*4);
  t.rdb_hdr_user0 = read_float(chr2(217:220,:), 1, count);
  t.rdb_hdr_user1 = read_float(chr2(221:224,:), 1, count);
  t.rdb_hdr_user2 = read_float(chr2(225:228,:), 1, count);
  t.rdb_hdr_user3 = read_float(chr2(229:232,:), 1, count);
  t.rdb_hdr_user4 = read_float(chr2(233:236,:), 1, count);
  t.rdb_hdr_user5 = read_float(chr2(237:240,:), 1, count);
  t.rdb_hdr_user6 = read_float(chr2(241:244,:), 1, count);
  t.rdb_hdr_user7 = read_float(chr2(245:248,:), 1, count);
  t.rdb_hdr_user8 = read_float(chr2(249:252,:), 1, count);
  t.rdb_hdr_user9 = read_float(chr2(253:256,:), 1, count);
  t.rdb_hdr_user10 = read_float(chr2(257:260,:), 1, count);
  t.rdb_hdr_user11 = read_float(chr2(261:264,:), 1, count);
  t.rdb_hdr_user12 = read_float(chr2(265:268,:), 1, count);
  t.rdb_hdr_user13 = read_float(chr2(269:272,:), 1, count);
  t.rdb_hdr_user14 = read_float(chr2(273:276,:), 1, count);
  t.rdb_hdr_user15 = read_float(chr2(277:280,:), 1, count);
  t.rdb_hdr_user16 = read_float(chr2(281:284,:), 1, count);
  t.rdb_hdr_user17 = read_float(chr2(285:288,:), 1, count);
  t.rdb_hdr_user18 = read_float(chr2(289:292,:), 1, count);
  t.rdb_hdr_user19 = read_float(chr2(293:296,:), 1, count);
  t.rdb_hdr_v_type = read_int(chr2(297:300,:), 1, count);
  t.rdb_hdr_v_coefxa = read_float(chr2(301:304,:), 1, count);
  t.rdb_hdr_v_coefxb = read_float(chr2(305:308,:), 1, count);
  t.rdb_hdr_v_coefxc = read_float(chr2(309:312,:), 1, count);
  t.rdb_hdr_v_coefxd = read_float(chr2(313:316,:), 1, count);
  t.rdb_hdr_v_coefya = read_float(chr2(317:320,:), 1, count);
  t.rdb_hdr_v_coefyb = read_float(chr2(321:324,:), 1, count);
  t.rdb_hdr_v_coefyc = read_float(chr2(325:328,:), 1, count);
  t.rdb_hdr_v_coefyd = read_float(chr2(329:332,:), 1, count);
  t.rdb_hdr_v_coefza = read_float(chr2(333:336,:), 1, count);
  t.rdb_hdr_v_coefzb = read_float(chr2(337:340,:), 1, count);
  t.rdb_hdr_v_coefzc = read_float(chr2(341:344,:), 1, count);
  t.rdb_hdr_v_coefzd = read_float(chr2(345:348,:), 1, count);
  t.rdb_hdr_vm_coef1 = read_float(chr2(349:352,:), 1, count);
  t.rdb_hdr_vm_coef2 = read_float(chr2(353:356,:), 1, count);
  t.rdb_hdr_vm_coef3 = read_float(chr2(357:360,:), 1, count);
  t.rdb_hdr_vm_coef4 = read_float(chr2(361:364,:), 1, count);
  t.rdb_hdr_v_venc = read_float(chr2(365:368,:), 1, count);
  t.spectral_width = read_float(chr2(369:372,:), 1, count);
  t.csi_dims = read_short(chr2(373:374,:), 1, count);
  t.xcsi = read_short(chr2(375:376,:), 1, count);
  t.ycsi = read_short(chr2(377:378,:), 1, count);
  t.zcsi = read_short(chr2(379:380,:), 1, count);
  t.roilenx = read_float(chr2(381:384,:), 1, count);
  t.roileny = read_float(chr2(385:388,:), 1, count);
  t.roilenz = read_float(chr2(389:392,:), 1, count);
  t.roilocx = read_float(chr2(393:396,:), 1, count);
  t.roilocy = read_float(chr2(397:400,:), 1, count);
  t.roilocz = read_float(chr2(401:404,:), 1, count);
  t.numdwell = read_float(chr2(405:408,:), 1, count);
  t.rdb_hdr_ps_command = read_int(chr2(409:412,:), 1, count);
  t.rdb_hdr_ps_mps_r1 = read_int(chr2(413:416,:), 1, count);
  t.rdb_hdr_ps_mps_r2 = read_int(chr2(417:420,:), 1, count);
  t.rdb_hdr_ps_mps_tg = read_int(chr2(421:424,:), 1, count);
  t.rdb_hdr_ps_mps_freq = read_unsigned_int(chr2(425:428,:), 1, count);
  t.rdb_hdr_ps_aps_r1 = read_int(chr2(429:432,:), 1, count);
  t.rdb_hdr_ps_aps_r2 = read_int(chr2(433:436,:), 1, count);
  t.rdb_hdr_ps_aps_tg = read_int(chr2(437:440,:), 1, count);
  t.rdb_hdr_ps_aps_freq = read_unsigned_int(chr2(441:444,:), 1, count);
  t.rdb_hdr_ps_scalei = read_float(chr2(445:448,:), 1, count);
  t.rdb_hdr_ps_scaleq = read_float(chr2(449:452,:), 1, count);
  t.rdb_hdr_ps_snr_warning = read_int(chr2(453:456,:), 1, count);
  t.rdb_hdr_ps_aps_or_mps = read_int(chr2(457:460,:), 1, count);
  t.rdb_hdr_ps_mps_bitmap = read_int(chr2(461:464,:), 1, count);
  t.rdb_hdr_ps_powerspec = read_char(chr2(465:720,:), 1, count*256);
  t.rdb_hdr_ps_filler1 = read_int(chr2(721:724,:), 1, count);
  t.rdb_hdr_ps_filler2 = read_int(chr2(725:728,:), 1, count);
  t.obsolete1 = read_float(chr2(729:792,:), 1, count*16);
  t.obsolete2 = read_float(chr2(793:856,:), 1, count*16);
  t.halfecho = read_short(chr2(857:858,:), 1, count);
  t.rdb_hdr_im_size_y = read_short(chr2(859:860,:), 1, count);
  t.rdb_hdr_data_collect_type1 = read_int(chr2(861:864,:), 1, count);
  t.rdb_hdr_freq_scale = read_float(chr2(865:868,:), 1, count);
  t.rdb_hdr_phase_scale = read_float(chr2(869:872,:), 1, count);
  t.rdb_hdr_ovl = read_short(chr2(873:874,:), 1, count);
  t.rdb_hdr_pclin = read_short(chr2(875:876,:), 1, count);
  t.rdb_hdr_pclinnpts = read_short(chr2(877:878,:), 1, count);
  t.rdb_hdr_pclinorder = read_short(chr2(879:880,:), 1, count);
  t.rdb_hdr_pclinavg = read_short(chr2(881:882,:), 1, count);
  t.rdb_hdr_pccon = read_short(chr2(883:884,:), 1, count);
  t.rdb_hdr_pcconnpts = read_short(chr2(885:886,:), 1, count);
  t.rdb_hdr_pcconorder = read_short(chr2(887:888,:), 1, count);
  t.rdb_hdr_pcextcorr = read_short(chr2(889:890,:), 1, count);
  t.rdb_hdr_pcgraph = read_short(chr2(891:892,:), 1, count);
  t.rdb_hdr_pcileave = read_short(chr2(893:894,:), 1, count);
  t.rdb_hdr_hdbestky = read_short(chr2(895:896,:), 1, count);
  t.rdb_hdr_pcctrl = read_short(chr2(897:898,:), 1, count);
  t.rdb_hdr_pcthrespts = read_short(chr2(899:900,:), 1, count);
  t.rdb_hdr_pcdiscbeg = read_short(chr2(901:902,:), 1, count);
  t.rdb_hdr_pcdiscmid = read_short(chr2(903:904,:), 1, count);
  t.rdb_hdr_pcdiscend = read_short(chr2(905:906,:), 1, count);
  t.rdb_hdr_pcthrespct = read_short(chr2(907:908,:), 1, count);
  t.rdb_hdr_pcspacial = read_short(chr2(909:910,:), 1, count);
  t.rdb_hdr_pctemporal = read_short(chr2(911:912,:), 1, count);
  t.rdb_hdr_pcspare = read_short(chr2(913:914,:), 1, count);
  t.rdb_hdr_ileaves = read_short(chr2(915:916,:), 1, count);
  t.rdb_hdr_kydir = read_short(chr2(917:918,:), 1, count);
  t.rdb_hdr_alt = read_short(chr2(919:920,:), 1, count);
  t.rdb_hdr_reps = read_short(chr2(921:922,:), 1, count);
  t.rdb_hdr_ref = read_short(chr2(923:924,:), 1, count);
  t.rdb_hdr_pcconnorm = read_float(chr2(925:928,:), 1, count);
  t.rdb_hdr_pcconfitwt = read_float(chr2(929:932,:), 1, count);
  t.rdb_hdr_pclinnorm = read_float(chr2(933:936,:), 1, count);
  t.rdb_hdr_pclinfitwt = read_float(chr2(937:940,:), 1, count);
  t.rdb_hdr_pcbestky = read_float(chr2(941:944,:), 1, count);
  t.rdb_hdr_vrgf = read_int(chr2(945:948,:), 1, count);
  t.rdb_hdr_vrgfxres = read_int(chr2(949:952,:), 1, count);
  t.rdb_hdr_bp_corr = read_int(chr2(953:956,:), 1, count);
  t.rdb_hdr_recv_freq_s = read_float(chr2(957:960,:), 1, count);
  t.rdb_hdr_recv_freq_e = read_float(chr2(961:964,:), 1, count);
  t.rdb_hdr_hniter = read_int(chr2(965:968,:), 1, count);
  t.rdb_hdr_fast_rec = read_int(chr2(969:972,:), 1, count);
  t.rdb_hdr_refframes = read_int(chr2(973:976,:), 1, count);
  t.rdb_hdr_refframep = read_int(chr2(977:980,:), 1, count);
  t.rdb_hdr_scnframe = read_int(chr2(981:984,:), 1, count);
  t.rdb_hdr_pasframe = read_int(chr2(985:988,:), 1, count);
  t.rdb_hdr_user_usage_tag = read_unsigned_int(chr2(989:992,:), 1, count);
  t.rdb_hdr_user_fill_mapMSW = read_unsigned_int(chr2(993:996,:), 1, count);
  t.rdb_hdr_user_fill_mapLSW = read_unsigned_int(chr2(997:1000,:), 1, count);
  t.rdb_hdr_user20 = read_float(chr2(1001:1004,:), 1, count);
  t.rdb_hdr_user21 = read_float(chr2(1005:1008,:), 1, count);
  t.rdb_hdr_user22 = read_float(chr2(1009:1012,:), 1, count);
  t.rdb_hdr_user23 = read_float(chr2(1013:1016,:), 1, count);
  t.rdb_hdr_user24 = read_float(chr2(1017:1020,:), 1, count);
  t.rdb_hdr_user25 = read_float(chr2(1021:1024,:), 1, count);
  t.rdb_hdr_user26 = read_float(chr2(1025:1028,:), 1, count);
  t.rdb_hdr_user27 = read_float(chr2(1029:1032,:), 1, count);
  t.rdb_hdr_user28 = read_float(chr2(1033:1036,:), 1, count);
  t.rdb_hdr_user29 = read_float(chr2(1037:1040,:), 1, count);
  t.rdb_hdr_user30 = read_float(chr2(1041:1044,:), 1, count);
  t.rdb_hdr_user31 = read_float(chr2(1045:1048,:), 1, count);
  t.rdb_hdr_user32 = read_float(chr2(1049:1052,:), 1, count);
  t.rdb_hdr_user33 = read_float(chr2(1053:1056,:), 1, count);
  t.rdb_hdr_user34 = read_float(chr2(1057:1060,:), 1, count);
  t.rdb_hdr_user35 = read_float(chr2(1061:1064,:), 1, count);
  t.rdb_hdr_user36 = read_float(chr2(1065:1068,:), 1, count);
  t.rdb_hdr_user37 = read_float(chr2(1069:1072,:), 1, count);
  t.rdb_hdr_user38 = read_float(chr2(1073:1076,:), 1, count);
  t.rdb_hdr_user39 = read_float(chr2(1077:1080,:), 1, count);
  t.rdb_hdr_user40 = read_float(chr2(1081:1084,:), 1, count);
  t.rdb_hdr_user41 = read_float(chr2(1085:1088,:), 1, count);
  t.rdb_hdr_user42 = read_float(chr2(1089:1092,:), 1, count);
  t.rdb_hdr_user43 = read_float(chr2(1093:1096,:), 1, count);
  t.rdb_hdr_user44 = read_float(chr2(1097:1100,:), 1, count);
  t.rdb_hdr_user45 = read_float(chr2(1101:1104,:), 1, count);
  t.rdb_hdr_user46 = read_float(chr2(1105:1108,:), 1, count);
  t.rdb_hdr_user47 = read_float(chr2(1109:1112,:), 1, count);
  t.rdb_hdr_user48 = read_float(chr2(1113:1116,:), 1, count);
  t.rdb_hdr_pcfitorig = read_short(chr2(1117:1118,:), 1, count);
  t.rdb_hdr_pcshotfirst = read_short(chr2(1119:1120,:), 1, count);
  t.rdb_hdr_pcshotlast = read_short(chr2(1121:1122,:), 1, count);
  t.rdb_hdr_pcmultegrp = read_short(chr2(1123:1124,:), 1, count);
  t.rdb_hdr_pclinfix = read_short(chr2(1125:1126,:), 1, count);
  t.rdb_hdr_pcconfix = read_short(chr2(1127:1128,:), 1, count);
  t.rdb_hdr_pclinslope = read_float(chr2(1129:1132,:), 1, count);
  t.rdb_hdr_pcconslope = read_float(chr2(1133:1136,:), 1, count);
  t.rdb_hdr_pccoil = read_short(chr2(1137:1138,:), 1, count);
  t.rdb_hdr_vvsmode = read_short(chr2(1139:1140,:), 1, count);
  t.rdb_hdr_vvsaimgs = read_short(chr2(1141:1142,:), 1, count);
  t.rdb_hdr_vvstr = read_short(chr2(1143:1144,:), 1, count);
  t.rdb_hdr_vvsgender = read_short(chr2(1145:1146,:), 1, count);
  t.rdb_hdr_zip_factor = read_short(chr2(1147:1148,:), 1, count);
  t.rdb_hdr_maxcoef1a = read_float(chr2(1149:1152,:), 1, count);
  t.rdb_hdr_maxcoef1b = read_float(chr2(1153:1156,:), 1, count);
  t.rdb_hdr_maxcoef1c = read_float(chr2(1157:1160,:), 1, count);
  t.rdb_hdr_maxcoef1d = read_float(chr2(1161:1164,:), 1, count);
  t.rdb_hdr_maxcoef2a = read_float(chr2(1165:1168,:), 1, count);
  t.rdb_hdr_maxcoef2b = read_float(chr2(1169:1172,:), 1, count);
  t.rdb_hdr_maxcoef2c = read_float(chr2(1173:1176,:), 1, count);
  t.rdb_hdr_maxcoef2d = read_float(chr2(1177:1180,:), 1, count);
  t.rdb_hdr_maxcoef3a = read_float(chr2(1181:1184,:), 1, count);
  t.rdb_hdr_maxcoef3b = read_float(chr2(1185:1188,:), 1, count);
  t.rdb_hdr_maxcoef3c = read_float(chr2(1189:1192,:), 1, count);
  t.rdb_hdr_maxcoef3d = read_float(chr2(1193:1196,:), 1, count);
  t.rdb_hdr_ut_ctrl = read_int(chr2(1197:1200,:), 1, count);
  t.rdb_hdr_dp_type = read_short(chr2(1201:1202,:), 1, count);
  t.rdb_hdr_arw = read_short(chr2(1203:1204,:), 1, count);
  t.rdb_hdr_vps = read_short(chr2(1205:1206,:), 1, count);
  t.rdb_hdr_mcReconEnable = read_short(chr2(1207:1208,:), 1, count);
  t.rdb_hdr_fov = read_float(chr2(1209:1212,:), 1, count);
  t.rdb_hdr_te = read_int(chr2(1213:1216,:), 1, count);
  t.rdb_hdr_te2 = read_int(chr2(1217:1220,:), 1, count);
  t.rdb_hdr_dfmrbw = read_float(chr2(1221:1224,:), 1, count);
  t.rdb_hdr_dfmctrl = read_int(chr2(1225:1228,:), 1, count);
  t.rdb_hdr_raw_nex = read_int(chr2(1229:1232,:), 1, count);
  t.rdb_hdr_navs_per_pass = read_int(chr2(1233:1236,:), 1, count);
  t.rdb_hdr_dfmxres = read_int(chr2(1237:1240,:), 1, count);
  t.rdb_hdr_dfmptsize = read_int(chr2(1241:1244,:), 1, count);
  t.rdb_hdr_navs_per_view = read_int(chr2(1245:1248,:), 1, count);
  t.rdb_hdr_dfmdebug = read_int(chr2(1249:1252,:), 1, count);
  t.rdb_hdr_dfmthreshold = read_float(chr2(1253:1256,:), 1, count);
  t.rdb_hdr_grid_control = read_short(chr2(1257:1258,:), 1, count);
  t.rdb_hdr_b0map = read_short(chr2(1259:1260,:), 1, count);
  t.rdb_hdr_grid_tediff = read_short(chr2(1261:1262,:), 1, count);
  t.rdb_hdr_grid_motion_comp = read_short(chr2(1263:1264,:), 1, count);
  t.rdb_hdr_grid_radius_a = read_float(chr2(1265:1268,:), 1, count);
  t.rdb_hdr_grid_radius_b = read_float(chr2(1269:1272,:), 1, count);
  t.rdb_hdr_grid_max_gradient = read_float(chr2(1273:1276,:), 1, count);
  t.rdb_hdr_grid_max_slew = read_float(chr2(1277:1280,:), 1, count);
  t.rdb_hdr_grid_scan_fov = read_float(chr2(1281:1284,:), 1, count);
  t.rdb_hdr_grid_a2d_time = read_float(chr2(1285:1288,:), 1, count);
  t.rdb_hdr_grid_density_factor = read_float(chr2(1289:1292,:), 1, count);
  t.rdb_hdr_grid_display_fov = read_float(chr2(1293:1296,:), 1, count);
  t.rdb_hdr_fatwater = read_short(chr2(1297:1298,:), 1, count);
  t.rdb_hdr_fiestamlf = read_short(chr2(1299:1300,:), 1, count);
  t.rdb_hdr_app = read_short(chr2(1301:1302,:), 1, count);
  t.rdb_hdr_rhncoilsel = read_short(chr2(1303:1304,:), 1, count);
  t.rdb_hdr_rhncoillimit = read_short(chr2(1305:1306,:), 1, count);
  t.rdb_hdr_app_option = read_short(chr2(1307:1308,:), 1, count);
  t.rdb_hdr_grad_mode = read_short(chr2(1309:1310,:), 1, count);
  t.rdb_hdr_pfile_passes = read_short(chr2(1311:1312,:), 1, count);
  t.rdb_hdr_asset = read_int(chr2(1313:1316,:), 1, count);
  t.rdb_hdr_asset_calthresh = read_int(chr2(1317:1320,:), 1, count);
  t.rdb_hdr_asset_R = read_float(chr2(1321:1324,:), 1, count);
  t.rdb_hdr_coilConfigUID = read_unsigned_int(chr2(1325:1328,:), 1, count);
  t.rdb_hdr_asset_phases = read_int(chr2(1329:1332,:), 1, count);
  t.rdb_hdr_scancent = read_float(chr2(1333:1336,:), 1, count);
  t.rdb_hdr_position = read_int(chr2(1337:1340,:), 1, count);
  t.rdb_hdr_entry = read_int(chr2(1341:1344,:), 1, count);
  t.rdb_hdr_lmhor = read_float(chr2(1345:1348,:), 1, count);
  t.rdb_hdr_last_slice_num = read_int(chr2(1349:1352,:), 1, count);
  t.rdb_hdr_asset_slice_R = read_float(chr2(1353:1356,:), 1, count);
  t.rdb_hdr_asset_slabwrap = read_float(chr2(1357:1360,:), 1, count);
  t.rdb_hdr_dwnav_coeff = read_float(chr2(1361:1364,:), 1, count);
  t.rdb_hdr_dwnav_cor = read_short(chr2(1365:1366,:), 1, count);
  t.rdb_hdr_dwnav_view = read_short(chr2(1367:1368,:), 1, count);
  t.rdb_hdr_dwnav_corecho = read_short(chr2(1369:1370,:), 1, count);
  t.rdb_hdr_dwnav_sview = read_short(chr2(1371:1372,:), 1, count);
  t.rdb_hdr_dwnav_eview = read_short(chr2(1373:1374,:), 1, count);
  t.rdb_hdr_dwnav_sshot = read_short(chr2(1375:1376,:), 1, count);
  t.rdb_hdr_dwnav_eshot = read_short(chr2(1377:1378,:), 1, count);
  t.rdb_hdr_3dwin_type = read_short(chr2(1379:1380,:), 1, count);
  t.rdb_hdr_3dwin_apod = read_float(chr2(1381:1384,:), 1, count);
  t.rdb_hdr_3dwin_q = read_float(chr2(1385:1388,:), 1, count);
  t.rdb_hdr_ime_scic_enable = read_short(chr2(1389:1390,:), 1, count);
  t.rdb_hdr_clariview_type = read_short(chr2(1391:1392,:), 1, count);
  t.rdb_hdr_ime_scic_edge = read_float(chr2(1393:1396,:), 1, count);
  t.rdb_hdr_ime_scic_smooth = read_float(chr2(1397:1400,:), 1, count);
  t.rdb_hdr_ime_scic_focus = read_float(chr2(1401:1404,:), 1, count);
  t.rdb_hdr_clariview_edge = read_float(chr2(1405:1408,:), 1, count);
  t.rdb_hdr_clariview_smooth = read_float(chr2(1409:1412,:), 1, count);
  t.rdb_hdr_clariview_focus = read_float(chr2(1413:1416,:), 1, count);
  t.rdb_hdr_scic_reduction = read_float(chr2(1417:1420,:), 1, count);
  t.rdb_hdr_scic_gauss = read_float(chr2(1421:1424,:), 1, count);
  t.rdb_hdr_scic_threshold = read_float(chr2(1425:1428,:), 1, count);
  t.rdb_hdr_ectricks_no_regions = read_int(chr2(1429:1432,:), 1, count);
  t.rdb_hdr_ectricks_input_regions = read_int(chr2(1433:1436,:), 1, count);
  t.rdb_hdr_psc_reuse = read_short(chr2(1437:1438,:), 1, count);
  t.rdb_hdr_left_blank = read_short(chr2(1439:1440,:), 1, count);
  t.rdb_hdr_right_blank = read_short(chr2(1441:1442,:), 1, count);
  t.rdb_hdr_acquire_type = read_short(chr2(1443:1444,:), 1, count);
  t.rdb_hdr_retro_control = read_short(chr2(1445:1446,:), 1, count);
  t.rdb_hdr_etl = read_short(chr2(1447:1448,:), 1, count);
  t.rdb_hdr_pcref_start = read_short(chr2(1449:1450,:), 1, count);
  t.rdb_hdr_pcref_stop = read_short(chr2(1451:1452,:), 1, count);
  t.rdb_hdr_ref_skip = read_short(chr2(1453:1454,:), 1, count);
  t.rdb_hdr_extra_frames_top = read_short(chr2(1455:1456,:), 1, count);
  t.rdb_hdr_extra_frames_bot = read_short(chr2(1457:1458,:), 1, count);
  t.rdb_hdr_multiphase_type = read_short(chr2(1459:1460,:), 1, count);
  t.rdb_hdr_nphases = read_short(chr2(1461:1462,:), 1, count);
  t.rdb_hdr_pure = read_short(chr2(1463:1464,:), 1, count);
  t.rdb_hdr_pure_scale = read_float(chr2(1465:1468,:), 1, count);
  t.rdb_hdr_off_data = read_int(chr2(1469:1472,:), 1, count);
  t.rdb_hdr_off_per_pass = read_int(chr2(1473:1476,:), 1, count);
  t.rdb_hdr_off_unlock_raw = read_int(chr2(1477:1480,:), 1, count);
  t.rdb_hdr_off_data_acq_tab = read_int(chr2(1481:1484,:), 1, count);
  t.rdb_hdr_off_nex_tab = read_int(chr2(1485:1488,:), 1, count);
  t.rdb_hdr_off_nex_abort_tab = read_int(chr2(1489:1492,:), 1, count);
  t.rdb_hdr_off_tool = read_int(chr2(1493:1496,:), 1, count);
  t.rdb_hdr_off_exam = read_int(chr2(1497:1500,:), 1, count);
  t.rdb_hdr_off_series = read_int(chr2(1501:1504,:), 1, count);
  t.rdb_hdr_off_image = read_int(chr2(1505:1508,:), 1, count);
  t.rdb_hdr_off_ps = read_int(chr2(1509:1512,:), 1, count);
  t.rdb_hdr_off_spare_b = read_int(chr2(1513:1516,:), 1, count);
  t.rdb_hdr_new_wnd_level_flag = read_int(chr2(1517:1520,:), 1, count);
  t.rdb_hdr_wnd_image_hist_area = read_int(chr2(1521:1524,:), 1, count);
  t.rdb_hdr_wnd_high_hist = read_float(chr2(1525:1528,:), 1, count);
  t.rdb_hdr_wnd_lower_hist = read_float(chr2(1529:1532,:), 1, count);
  t.rdb_hdr_pure_filter = read_short(chr2(1533:1534,:), 1, count);
  t.rdb_hdr_cfg_pure_filter = read_short(chr2(1535:1536,:), 1, count);
  t.rdb_hdr_cfg_pure_fit_order = read_short(chr2(1537:1538,:), 1, count);
  t.rdb_hdr_cfg_pure_kernelsize_z = read_short(chr2(1539:1540,:), 1, count);
  t.rdb_hdr_cfg_pure_kernelsize_xy = read_short(chr2(1541:1542,:), 1, count);
  t.rdb_hdr_cfg_pure_weight_radius = read_short(chr2(1543:1544,:), 1, count);
  t.rdb_hdr_cfg_pure_intensity_scale = read_short(chr2(1545:1546,:), 1, count);
  t.rdb_hdr_cfg_pure_noise_threshold = read_short(chr2(1547:1548,:), 1, count);
  t.rdb_hdr_wienera = read_float(chr2(1549:1552,:), 1, count);
  t.rdb_hdr_wienerb = read_float(chr2(1553:1556,:), 1, count);
  t.rdb_hdr_wienert2 = read_float(chr2(1557:1560,:), 1, count);
  t.rdb_hdr_wieneresp = read_float(chr2(1561:1564,:), 1, count);
  t.rdb_hdr_wiener = read_short(chr2(1565:1566,:), 1, count);
  t.rdb_hdr_flipfilter = read_short(chr2(1567:1568,:), 1, count);
  t.rdb_hdr_dbgrecon = read_short(chr2(1569:1570,:), 1, count);
  t.rdb_hdr_ech2skip = read_short(chr2(1571:1572,:), 1, count);
  t.rdb_hdr_tricks_type = read_int(chr2(1573:1576,:), 1, count);
  t.rdb_hdr_lcfiesta_phase = read_float(chr2(1577:1580,:), 1, count);
  t.rdb_hdr_lcfiesta = read_short(chr2(1581:1582,:), 1, count);
  t.rdb_hdr_herawflt = read_short(chr2(1583:1584,:), 1, count);
  t.rdb_hdr_herawflt_befnwin = read_short(chr2(1585:1586,:), 1, count);
  t.rdb_hdr_herawflt_befntran = read_short(chr2(1587:1588,:), 1, count);
  t.rdb_hdr_herawflt_befamp = read_float(chr2(1589:1592,:), 1, count);
  t.rdb_hdr_herawflt_hpfamp = read_float(chr2(1593:1596,:), 1, count);
  t.rdb_hdr_heover = read_short(chr2(1597:1598,:), 1, count);
  t.rdb_hdr_pure_correction_threshold = read_short(chr2(1599:1600,:), 1, count);
  t.rdb_hdr_swiftenable = read_int(chr2(1601:1604,:), 1, count);
  t.rdb_hdr_numslabs = read_short(chr2(1605:1606,:), 1, count);
  t.rdb_hdr_numCoilConfigs = read_unsigned_short_int(chr2(1607:1608,:), 1, count);
  t.rdb_hdr_ps_autoshim_status = read_int(chr2(1609:1612,:), 1, count);
  t.rdb_hdr_dynaplan_numphases = read_int(chr2(1613:1616,:), 1, count);
  t.rdb_hdr_medal_cfg = read_short(chr2(1617:1618,:), 1, count);
  t.rdb_hdr_medal_nstack = read_short(chr2(1619:1620,:), 1, count);
  t.rdb_hdr_medal_echo_order = read_short(chr2(1621:1622,:), 1, count);
  t.rdb_hdr_medal_kernel_up = read_short(chr2(1623:1624,:), 1, count);
  t.rdb_hdr_medal_kernel_down = read_short(chr2(1625:1626,:), 1, count);
  t.rdb_hdr_medal_kernel_smooth = read_short(chr2(1627:1628,:), 1, count);
  t.rdb_hdr_medal_start = read_short(chr2(1629:1630,:), 1, count);
  t.rdb_hdr_medal_end = read_short(chr2(1631:1632,:), 1, count);
  t.rdb_hdr_rcideal = read_unsigned_int(chr2(1633:1636,:), 1, count);
  t.rdb_hdr_rcdixproc = read_unsigned_int(chr2(1637:1640,:), 1, count);
  t.rdb_hdr_df = read_float(chr2(1641:1644,:), 1, count);
  t.rdb_hdr_bw = read_float(chr2(1645:1648,:), 1, count);
  t.rdb_hdr_te1 = read_float(chr2(1649:1652,:), 1, count);
  t.rdb_hdr_esp = read_float(chr2(1653:1656,:), 1, count);
  t.rdb_hdr_feextra = read_int(chr2(1657:1660,:), 1, count);
  t.rdb_hdr_raw_pass_size = read_n64(chr2(1661:1668,:), 1, count);
  t.rdb_hdr_sspsave = read_n64(chr2(1669:1676,:), 1, count);
  t.rdb_hdr_udasave = read_n64(chr2(1677:1684,:), 1, count);
  t.rdb_hdr_vibrant = read_short(chr2(1685:1686,:), 1, count);
  t.rdb_hdr_asset_torso = read_short(chr2(1687:1688,:), 1, count);
  t.rdb_hdr_asset_alt_cal = read_int(chr2(1689:1692,:), 1, count);
  t.rdb_hdr_kacq_uid = read_int(chr2(1693:1696,:), 1, count);
  t.rdb_hdr_cttEntry = read_ChannelTransTableEntryType(chr2(1697:2640,:), 1, count*4);
  t.rdb_hdr_psc_ta = read_s32(chr2(2641:2644,:), 1, count);
  t.rdb_hdr_disk_acq_ctrl = read_s32(chr2(2645:2648,:), 1, count);
  t.rdb_hdr_asset_localTx = read_int(chr2(2649:2652,:), 1, count);
  t.rdb_hdr_3dscale = read_float(chr2(2653:2656,:), 1, count);
  t.rdb_hdr_broad_band_select = read_int(chr2(2657:2660,:), 1, count);
  t.rdb_hdr_scanner_mode = read_short(chr2(2661:2662,:), 1, count);
  t.short_padding_1 = read_short(chr2(2663:2664,:), 1, count);
  t.rdb_hdr_excess = read_short(chr2(2665:4096,:), 1, count*716);

function [t, outpos] = read_VME_ADDRESS(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.bam_address64 = read_BAM_addr(chr2(1:8,:), 1, count);

function [t, outpos] = read_RDB_PASS_INFO_ENTRY(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.dab_bam = read_VME_ADDRESS(chr2(1:8,:), 1, count*1);

function [t, outpos] = read_RDB_PER_PASS_TAB(chr, inpos, count)
  [t, outpos] = read_RDB_PASS_INFO_ENTRY(chr, inpos, count*((2048)));

function [t, outpos] = read_RDB_UNLOCK_RAW_TAB(chr, inpos, count)
  [t, outpos] = read_RDB_PASS_INFO_ENTRY(chr, inpos, count*((2048)));

function [t, outpos] = read_RDB_SLICE_INFO_ENTRY(chr, inpos, count)
  outpos = inpos + 48 * count;
  chr2=reshape(chr(inpos:inpos+count*48-1), 48, []);
  t.pass_number = read_short(chr2(1:2,:), 1, count);
  t.slice_in_pass = read_short(chr2(3:4,:), 1, count);
  t.gw_point1 = read_float(chr2(5:16,:), 1, count*3);
  t.gw_point2 = read_float(chr2(17:28,:), 1, count*3);
  t.gw_point3 = read_float(chr2(29:40,:), 1, count*3);
  t.transpose = read_short(chr2(41:42,:), 1, count);
  t.rotate = read_short(chr2(43:44,:), 1, count);
  t.coilConfigUID = read_unsigned_int(chr2(45:48,:), 1, count);

function [t, outpos] = read_RDB_DATA_ACQ_TAB(chr, inpos, count)
  [t, outpos] = read_RDB_SLICE_INFO_ENTRY(chr, inpos, count*(1 * (2048)));

function [t, outpos] = read_RDB_GAIN_ENTRY(chr, inpos, count)
  outpos = inpos + 12 * count;
  chr2=reshape(chr(inpos:inpos+count*12-1), 12, []);
  t.range = read_short(chr2(1:2,:), 1, count);
  t.gaini = read_float(chr2(5:8,:), 1, count);
  t.gainq = read_float(chr2(9:12,:), 1, count);

function [t, outpos] = read_RDB_GAIN_TAB(chr, inpos, count)
  [t, outpos] = read_RDB_GAIN_ENTRY(chr, inpos, count*(5));

function [t, outpos] = read_RDB_NEX_ENTRY(chr, inpos, count)
  [t, outpos] = read_short(chr, inpos, count);

function [t, outpos] = read_RDB_NEX_TAB(chr, inpos, count)
  [t, outpos] = read_RDB_NEX_ENTRY(chr, inpos, count*(1026));

function [t, outpos] = read_RDB_NEX_TYPE(chr, inpos, count)
  outpos = inpos + 2052 * count;
  chr2=reshape(chr(inpos:inpos+count*2052-1), 2052, []);
  t.rdb_hdr_nex_size = read_short(chr2(1:2052,:), 1, count*1026);

function [t, outpos] = read_RDBM_HEADER(chr, inpos, count)
  outpos = inpos + 139272 * count;
  chr2=reshape(chr(inpos:inpos+count*139272-1), 139272, []);
  t.rdb_hdr_rec = read_RDB_HEADER_REC(chr2(1:4096,:), 1, count);
  t.rdb_hdr_per_pass = read_RDB_PER_PASS_TAB(chr2(4097:20480,:), 1, count);
  t.rdb_hdr_unlock_raw = read_RDB_PER_PASS_TAB(chr2(20481:36864,:), 1, count);
  t.rdb_hdr_data_acq_tab = read_RDB_DATA_ACQ_TAB(chr2(36865:135168,:), 1, count);
  t.rdb_hdr_nex_tab = read_RDB_NEX_TYPE(chr2(135169:137220,:), 1, count);
  t.rdb_hdr_nex_abort_tab = read_RDB_NEX_TYPE(chr2(137221:139272,:), 1, count);

function [t, outpos] = read_IMAGE_HEADER(chr, inpos, count)
  outpos = inpos + 9016 * count;
  chr2=reshape(chr(inpos:inpos+count*9016-1), 9016, []);
  t.rdb_hdr_tool = read_TOOLSDATA(chr2(1:2048,:), 1, count);
  t.rdb_hdr_exam = read_EXAMDATATYPE(chr2(2049:4008,:), 1, count);
  t.rdb_hdr_series = read_SERIESDATATYPE(chr2(4009:6568,:), 1, count);
  t.rdb_hdr_image = read_MRIMAGEDATATYPE(chr2(6569:9016,:), 1, count);

function [t, outpos] = read_POOL_HEADER(chr, inpos, count)
  outpos = inpos + 149788 * count;
  chr2=reshape(chr(inpos:inpos+count*149788-1), 149788, []);
  t.rdb_hdr_rec = read_RDB_HEADER_REC(chr2(1:4096,:), 1, count);
  t.rdb_hdr_per_pass = read_RDB_PER_PASS_TAB(chr2(4097:20480,:), 1, count);
  t.rdb_hdr_unlock_raw = read_RDB_PER_PASS_TAB(chr2(20481:36864,:), 1, count);
  t.rdb_hdr_data_acq_tab = read_RDB_DATA_ACQ_TAB(chr2(36865:135168,:), 1, count);
  t.rdb_hdr_nex_tab = read_RDB_NEX_TYPE(chr2(135169:137220,:), 1, count);
  t.rdb_hdr_nex_abort_tab = read_RDB_NEX_TYPE(chr2(137221:139272,:), 1, count);
  t.rdb_hdr_tool = read_TOOLSDATA(chr2(139273:141320,:), 1, count);
  t.rdb_hdr_ps = read_PRESCAN_HEADER(chr2(141321:142820,:), 1, count);
  t.rdb_hdr_exam = read_EXAMDATATYPE(chr2(142821:144780,:), 1, count);
  t.rdb_hdr_series = read_SERIESDATATYPE(chr2(144781:147340,:), 1, count);
  t.rdb_hdr_image = read_MRIMAGEDATATYPE(chr2(147341:149788,:), 1, count);

function [t, outpos] = read_frame_node(chr, inpos, count)
  outpos = inpos + 20 * count;
  chr2=reshape(chr(inpos:inpos+count*20-1), 20, []);
  t.op_code = read_short(chr2(17:18,:), 1, count);
  t.index = read_short(chr2(19:20,:), 1, count);

function [t, outpos] = read_op_node(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);
  t.frame_cnt = read_int(chr2(1:4,:), 1, count);

function [t, outpos] = read_view_node(chr, inpos, count)
  outpos = inpos + 36 * count;
  chr2=reshape(chr(inpos:inpos+count*36-1), 36, []);
  t.op_ptr = read_op_node(chr2(5:36,:), 1, count*4);

function [t, outpos] = read_echo_node(chr, inpos, count)
  outpos = inpos + 8 * count;
  chr2=reshape(chr(inpos:inpos+count*8-1), 8, []);

function [t, outpos] = read_RDB_IO_PACKET(chr, inpos, count)
  outpos = inpos + 400 * count;
  chr2=reshape(chr(inpos:inpos+count*400-1), 400, []);
  t.hdr_no = read_int(chr2(1:4,:), 1, count);
  t.fd = read_int(chr2(5:8,:), 1, count);
  t.bam_addr = read_VME_ADDRESS(chr2(9:16,:), 1, count);
  t.ssp_addr = read_VME_ADDRESS(chr2(17:24,:), 1, count);
  t.uda_addr = read_VME_ADDRESS(chr2(25:32,:), 1, count);
  t.data_len = read_n64(chr2(33:40,:), 1, count);
  t.run_num = read_int(chr2(41:44,:), 1, count);
  t.rawsize = read_n64(chr2(45:52,:), 1, count);
  t.sspsave = read_n64(chr2(53:60,:), 1, count);
  t.udasave = read_n64(chr2(61:68,:), 1, count);
  t.content = read_int(chr2(69:72,:), 1, count);
  t.col_type = read_int(chr2(73:76,:), 1, count);
  t.npasses = read_int(chr2(77:80,:), 1, count);
  t.nslices = read_int(chr2(81:84,:), 1, count);
  t.nechoes = read_int(chr2(85:88,:), 1, count);
  t.nframes = read_int(chr2(89:92,:), 1, count);
  t.nbaseline = read_int(chr2(93:96,:), 1, count);
  t.order = read_int(chr2(97:100,:), 1, count);
  t.xres = read_int(chr2(101:104,:), 1, count);
  t.yres = read_int(chr2(105:108,:), 1, count);
  t.point_size = read_int(chr2(109:112,:), 1, count);
  t.start_rcv = read_int(chr2(113:116,:), 1, count);
  t.stop_rcv = read_int(chr2(117:120,:), 1, count);
  t.rcv_no = read_int(chr2(121:124,:), 1, count);
  t.scan_date = read_char(chr2(133:148,:), 1, count*16);
  t.scan_time = read_char(chr2(149:164,:), 1, count*16);
  t.navs = read_int(chr2(165:168,:), 1, count);
  t.patname = read_char(chr2(169:232,:), 1, count*64);
  t.coil_name = read_char(chr2(233:264,:), 1, count*32);
  t.psd_name = read_char(chr2(265:296,:), 1, count*32);
  t.exam = read_int(chr2(297:300,:), 1, count);
  t.series = read_int(chr2(301:304,:), 1, count);
  t.image = read_int(chr2(305:308,:), 1, count);
  t.data_type = read_int(chr2(309:312,:), 1, count);
  t.coil_type = read_int(chr2(313:316,:), 1, count);
  t.dfov = read_float(chr2(317:320,:), 1, count);
  t.usercv = read_float(chr2(321:400,:), 1, count*20);

function [t, outpos] = read_RDB_TAPE_PACKET(chr, inpos, count)
  outpos = inpos + 16 * count;
  chr2=reshape(chr(inpos:inpos+count*16-1), 16, []);
  t.fd = read_int(chr2(1:4,:), 1, count);
  t.d_type = read_int(chr2(5:8,:), 1, count);
  t.offset = read_int(chr2(9:12,:), 1, count);

